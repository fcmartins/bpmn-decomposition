/* The following code was generated by JFlex 1.3.5 on 4/20/16 1:27 AM */

package org.callas.vm.parse;

/**
 * The lexicon of the Callas assembly.
 *
 * @author Tiago Cogumbreiro
 * @version $Id: callas-asm.lex,v 1.1 2011/02/08 20:18:46 cogumbreiro Exp $
 */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 4/20/16 1:27 AM from the specification file
 * <tt>file:/home/fferreira/Bolsas/FCT.1/svn/trunk/software/fabio/callas/cvm-java/src/lang/jflex/callas-asm.lex</tt>
 */
class Lex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRING = 1;
  final public static int YYINITIAL = 0;
  final public static int COMMENT = 2;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3,  0,  0, 54,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0, 50,  0,  0,  0,  0,  0,  0,  0, 52,  9,  0,  6,  7, 51, 
     5,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0,  2,  0,  0,  0,  0, 
     0, 25, 10, 24, 13, 15, 26, 17,  0, 21,  0,  0, 12, 22, 16, 11, 
    27,  0, 20, 18, 19, 14, 28,  0,  0, 23,  0,  0, 53,  0,  0,  0, 
     0, 32, 45, 37, 31,  8, 49, 41, 46, 39,  0,  0, 38, 40, 36, 42, 
    30, 47, 35, 44, 33, 29, 43, 48, 34,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    55,   110,   165,   220,   275,   330,   385,   440,   495, 
      550,   605,   660,   715,   770,   825,   880,   935,   990,  1045, 
     1100,  1155,  1210,  1265,  1320,  1375,  1430,  1485,  1540,  1595, 
      165,  1650,   165,   165,   165,  1705,   165,  1760,  1815,  1870, 
      385,  1925,   165,  1980,  2035,  2090,  2145,  2200,  2255,  2310, 
     2365,  2420,  2475,  2530,  2585,  2640,  2695,  2750,  2805,  2860, 
     2915,  2970,  3025,  3080,  3135,  3190,  3245,  3300,  3355,  3410, 
     3465,  3520,  3575,  3630,  3685,  3740,  3795,  3850,  3905,  3960, 
     4015,  4070,  4125,  4180,  4235,  4290,  4345,  4400,   275,   165, 
      165,   165,   165,  4455,  4455,  4510,  4565,  4620,  4675,  4730, 
     4785,  4840,  4895,  4950,  5005,  5060,  5115,  5170,   165,   165, 
      165,  5225,  5280,  5335,   165,  5390,   165,  5445,  5500,  5555, 
     5610,  5665,   165,  5720,  5775,  5830,  5885,  5940,  5995,  6050, 
      165,  6105,   165,  6160,   165,  6215,  6270,  6325,  6380,  6435, 
     6490,  6545,  6600,  6655,  6710,   165,  6765,   165,   165,  6820, 
     6875,  6930,  6985,  7040,   165,  7095,  7150,  7205,  7260,   165, 
      165,   165,   165,   165,  7315,  7370,  7425,   165,   165,   165, 
      165,   165,   165,   165,   165,   165,  7480,   165,   165,   165, 
     7535,   165,   165,  7590,   165,   165,   165,   165,  7645,  7700, 
     7755,  7810,  7865,  7920,  7975,  8030,  8085,  8140,   165,  8195, 
     8250,   165,   165,   165,  8305,  8360,   165,   165,   165,   165, 
     8415,   165,  8470,  8525,  8580,   165,   165,  8635,   165,   165, 
      165,  8690,  8745,  8800,   165,   165,   165,  8855,  8910,   165
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\4\1\5\1\6\1\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\4\1\14\1\4\1\15\1\16\4\4\1\17"+
    "\3\4\1\20\1\4\1\21\1\4\1\22\1\23\1\4"+
    "\1\24\1\25\1\26\1\4\1\27\1\4\1\30\1\4"+
    "\1\31\1\32\1\33\1\4\1\34\2\4\1\35\1\36"+
    "\4\4\1\37\1\40\3\4\3\41\1\42\56\41\1\43"+
    "\2\41\1\44\4\45\1\0\60\45\1\46\2\45\70\0"+
    "\1\5\1\0\1\5\63\0\3\6\1\0\63\6\4\0"+
    "\2\7\1\0\1\47\1\50\6\0\1\50\53\0\2\51"+
    "\1\0\1\47\1\50\6\0\1\50\53\0\1\52\1\53"+
    "\65\0\2\47\123\0\1\54\37\0\1\55\66\0\1\56"+
    "\66\0\1\57\76\0\1\60\3\0\1\61\52\0\1\62"+
    "\66\0\1\63\71\0\1\64\5\0\1\65\73\0\1\66"+
    "\73\0\1\67\102\0\1\70\24\0\1\71\24\0\1\72"+
    "\1\0\1\73\1\74\3\0\1\75\1\0\1\76\1\0"+
    "\1\77\1\100\2\0\1\101\61\0\1\102\27\0\1\103"+
    "\116\0\1\104\36\0\1\105\26\0\1\106\1\107\1\0"+
    "\1\110\1\111\1\112\1\0\1\113\1\0\1\114\1\115"+
    "\1\116\1\0\1\117\73\0\1\120\57\0\1\121\24\0"+
    "\1\122\30\0\1\123\16\0\1\124\46\0\1\125\1\0"+
    "\1\126\1\0\1\127\5\0\1\130\14\0\3\6\1\0"+
    "\60\6\1\131\2\6\41\0\1\132\2\0\1\42\15\0"+
    "\1\133\2\0\1\134\64\0\1\135\7\0\2\47\2\0"+
    "\1\50\6\0\1\50\53\0\2\136\1\137\2\0\1\137"+
    "\61\0\2\52\122\0\1\140\40\0\1\141\73\0\1\142"+
    "\7\0\1\143\54\0\1\144\74\0\1\145\70\0\1\146"+
    "\55\0\1\147\66\0\1\150\71\0\1\151\65\0\1\152"+
    "\73\0\1\153\101\0\1\154\65\0\1\155\107\0\1\156"+
    "\45\0\1\157\77\0\1\160\56\0\1\161\37\0\1\162"+
    "\117\0\1\163\62\0\1\164\72\0\1\165\62\0\1\166"+
    "\101\0\1\167\57\0\1\170\3\0\1\171\67\0\1\172"+
    "\77\0\1\173\56\0\1\174\56\0\1\175\4\0\1\176"+
    "\74\0\1\177\24\0\1\200\66\0\1\201\41\0\1\202"+
    "\55\0\1\203\62\0\1\204\72\0\1\205\65\0\1\206"+
    "\2\0\1\207\60\0\1\210\20\0\1\211\51\0\1\212"+
    "\66\0\1\213\71\0\1\214\74\0\1\215\54\0\1\216"+
    "\72\0\1\217\74\0\1\220\66\0\1\221\57\0\1\222"+
    "\27\0\2\136\71\0\1\223\72\0\1\224\73\0\1\225"+
    "\76\0\1\226\47\0\1\227\101\0\1\230\53\0\1\231"+
    "\72\0\1\232\67\0\1\233\77\0\1\234\55\0\1\235"+
    "\100\0\1\236\75\0\1\237\101\0\1\240\52\0\1\241"+
    "\100\0\1\242\63\0\1\243\75\0\1\244\21\0\1\245"+
    "\113\0\1\246\41\0\1\247\124\0\1\250\73\0\1\251"+
    "\52\0\1\252\66\0\1\253\72\0\1\254\73\0\1\255"+
    "\67\0\1\256\56\0\1\257\73\0\1\260\57\0\1\261"+
    "\104\0\1\262\54\0\1\263\2\0\1\264\63\0\1\265"+
    "\75\0\1\266\53\0\1\267\72\0\1\270\61\0\1\271"+
    "\67\0\1\272\72\0\1\273\64\0\1\274\70\0\1\275"+
    "\37\0\1\276\66\0\1\277\72\0\1\300\61\0\1\301"+
    "\67\0\1\302\75\0\1\303\77\0\1\304\60\0\1\305"+
    "\101\0\1\306\70\0\1\307\66\0\1\310\72\0\1\311"+
    "\64\0\1\312\2\0\1\313\4\0\1\314\46\0\1\315"+
    "\41\0\1\316\122\0\1\317\44\0\1\320\63\0\1\321"+
    "\70\0\1\322\61\0\1\323\71\0\1\324\74\0\1\325"+
    "\72\0\1\326\54\0\1\327\57\0\1\330\122\0\1\331"+
    "\75\0\1\332\23\0\1\333\133\0\1\334\33\0\1\335"+
    "\57\0\1\336\77\0\1\337\65\0\1\340\53\0\1\341"+
    "\76\0\1\342\70\0\1\343\63\0\1\344\73\0\1\345"+
    "\64\0\1\346\44\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1, 
     9,  9,  9,  1,  9,  1,  1,  0,  1,  1,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  9,  9,  9,  9,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  0, 
     0,  0,  9,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  9,  0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  9,  9,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  9, 
     9,  9,  9,  9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9, 
     1,  9,  9,  9,  0,  9,  9,  0,  9,  9,  9,  9,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  0,  0,  9,  9,  9,  0,  1,  9,  9, 
     9,  9,  0,  9,  0,  0,  0,  9,  9,  0,  9,  9,  9,  0,  0,  0, 
     9,  9,  9,  0,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    private StringBuffer buffer;

    /** Issue an error.
     * @param m Message
     */
    private void error(String m) { System.err.println((yyline + 1) + "." + yycolumn + ":" + m); }

    /**
     * A token built from a kind and value.
     * @param kind The kind of the token, usually an integer of the
     * enumeration class <pre>sym</pre> generated by CUP
     * @param value The value of the token
     */
    private java_cup.runtime.Symbol token(int kind, Object value) {
          return new java_cup.runtime.Symbol(kind, yyline,
                          yycolumn, value);
    }
    /**
     * A token built from its type and from the String at <pre>yytext()</pre>.
     * @param kind The kind of the token, usually an integer of the
     * enumeration class <pre>sym</pre> generated by CUP
     */
    private java_cup.runtime.Symbol token(int kind) {
        return token(kind,  yytext());
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lex(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[8965];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 229: 
          {  return token(sym.PARAMETERS);  }
        case 231: break;
        case 34: 
          {  yybegin(YYINITIAL); return token(sym.STRING_VALUE, buffer.toString()); }
        case 232: break;
        case 226: 
          {  return token(sym.FREEVARS);  }
        case 233: break;
        case 225: 
          {  return token(sym.FUNCTION);  }
        case 234: break;
        case 220: 
          {  return token(sym.SYMBOLS);  }
        case 235: break;
        case 224: 
          {  return token(sym.RECEIVE);  }
        case 236: break;
        case 162: 
          {  return token(sym.DMUL);  }
        case 237: break;
        case 161: 
          {  return token(sym.DNEG);  }
        case 238: break;
        case 160: 
          {  return token(sym.DADD);  }
        case 239: break;
        case 159: 
          {  return token(sym.DDIV);  }
        case 240: break;
        case 154: 
          {  return token(sym.CODE);  }
        case 241: break;
        case 148: 
          {  return token(sym.LONG);  }
        case 242: break;
        case 147: 
          {  return token(sym.BOOL);  }
        case 243: break;
        case 145: 
          {  return token(sym.BOR);  }
        case 244: break;
        case 134: 
          {  return token(sym.LOR);  }
        case 245: break;
        case 132: 
          {  return token(sym.LGT);  }
        case 246: break;
        case 130: 
          {  return token(sym.LLT);  }
        case 247: break;
        case 122: 
          {  return token(sym.LEQ);  }
        case 248: break;
        case 116: 
          {  return token(sym.DGT);  }
        case 249: break;
        case 114: 
          {  return token(sym.DLT);  }
        case 250: break;
        case 110: 
          {  return token(sym.DUP);  }
        case 251: break;
        case 109: 
          {  return token(sym.DEQ);  }
        case 252: break;
        case 108: 
          {  return token(sym.POP);  }
        case 253: break;
        case 56: 
          {  return token(sym.DEQ);  }
        case 254: break;
        case 68: 
          {  return token(sym.LEQ);  }
        case 255: break;
        case 163: 
          {  return token(sym.DSUB);  }
        case 256: break;
        case 167: 
          {  return token(sym.CALL);  }
        case 257: break;
        case 168: 
          {  return token(sym.LDIV);  }
        case 258: break;
        case 169: 
          {  return token(sym.LADD);  }
        case 259: break;
        case 170: 
          {  return token(sym.LAND);  }
        case 260: break;
        case 171: 
          {  return token(sym.LXOR);  }
        case 261: break;
        case 172: 
          {  return token(sym.LREM);  }
        case 262: break;
        case 173: 
          {  return token(sym.LNEG);  }
        case 263: break;
        case 174: 
          {  return token(sym.LNOT);  }
        case 264: break;
        case 175: 
          {  return token(sym.LMUL);  }
        case 265: break;
        case 176: 
          {  return token(sym.LOAD);  }
        case 266: break;
        case 177: 
          {  return token(sym.LSUB);  }
        case 267: break;
        case 178: 
          {  return token(sym.LSHR);  }
        case 268: break;
        case 179: 
          {  return token(sym.LSHL);  }
        case 269: break;
        case 181: 
          {  return token(sym.GOTO);  }
        case 270: break;
        case 182: 
          {  return token(sym.SEND);  }
        case 271: break;
        case 184: 
          {  return token(sym.SWAP);  }
        case 272: break;
        case 185: 
          {  return token(sym.BAND);  }
        case 273: break;
        case 186: 
          {  return token(sym.BXOR);  }
        case 274: break;
        case 187: 
          {  return token(sym.BNOT);  }
        case 275: break;
        case 30: 
          {  buffer = new StringBuffer(); yybegin(STRING);  }
        case 276: break;
        case 33: 
          {  buffer.append("\n");  }
        case 277: break;
        case 89: 
          {  buffer.append("\t");  }
        case 278: break;
        case 90: 
          {  buffer.append("\"");  }
        case 279: break;
        case 91: 
          {  buffer.append("\\");  }
        case 280: break;
        case 32: 
        case 35: 
          {  buffer.append(yytext());  }
        case 281: break;
        case 3: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
          {  error("Illegal character " + yytext());  }
        case 282: break;
        case 92: 
          {  yybegin(YYINITIAL);  }
        case 283: break;
        case 6: 
        case 7: 
        case 41: 
        case 42: 
          {  return token(sym.LONG_VALUE, Long.valueOf(yytext()));  }
        case 284: break;
        case 38: 
        case 40: 
        case 93: 
          {  return token(sym.DOUBLE_VALUE, Double.valueOf(yytext()));  }
        case 285: break;
        case 88: 
          {  yybegin(COMMENT);  }
        case 286: break;
        case 198: 
          {  return token(sym.TIMER);  }
        case 287: break;
        case 201: 
          {  return token(sym.LOADC);  }
        case 288: break;
        case 202: 
          {  return token(sym.LOADM);  }
        case 289: break;
        case 203: 
          {  return token(sym.LOADB);  }
        case 290: break;
        case 205: 
          {  return token(sym.STORE);  }
        case 291: break;
        case 206: 
          {  return token(sym.EXTERN);  }
        case 292: break;
        case 207: 
          {  return token(sym.LOCALS);  }
        case 293: break;
        case 208: 
          {  return token(sym.DOUBLE);  }
        case 294: break;
        case 209: 
          {  return token(sym.STRING);  }
        case 295: break;
        case 211: 
          {  return token(sym.MODULE);  }
        case 296: break;
        case 215: 
          {  return token(sym.UPDATE);  }
        case 297: break;
        case 216: 
          {  return token(sym.RETURN);  }
        case 298: break;
        case 218: 
          {  return token(sym.IFTRUE);  }
        case 299: break;
        case 219: 
          {  return token(sym.STOREB);  }
        case 300: break;
        case 5: 
        case 31: 
          {   }
        case 301: break;
        case 4: 
          {   }
        case 302: break;
        case 36: 
          {   }
        case 303: break;
        case 37: 
          {   }
        case 304: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return new java_cup.runtime.Symbol(sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
