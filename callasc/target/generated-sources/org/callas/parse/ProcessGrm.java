
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Apr 20 01:01:41 WEST 2016
//----------------------------------------------------

package org.callas.parse;

import java.util.*;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import java_cup.runtime.Symbol;
import org.callas.absyn.*;
import org.callas.absyn.processes.*;
import org.callas.absyn.processes.Timer;
import org.callas.absyn.types.*;
import org.callas.util.TypeEquality;
import org.callas.core.IFileLoader;
import org.tyco.common.errorMsg.ErrorMessage;
import org.tyco.common.errorMsg.SourceLocation;
import org.tyco.common.errorMsg.msgs.SyntacticError;
import org.tyco.common.util.Pair;

/** CUP v0.10k generated parser.
  * @version Wed Apr 20 01:01:41 WEST 2016
  */
public class ProcessGrm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ProcessGrm() {super();}

  /** Constructor which sets the default scanner. */
  public ProcessGrm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\233\000\002\002\004\000\002\005\005\000\002\005" +
    "\003\000\002\005\003\000\002\027\004\000\002\027\003" +
    "\000\002\027\002\000\002\026\004\000\002\026\003\000" +
    "\002\010\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\025" +
    "\004\000\002\025\003\000\002\041\006\000\002\041\010" +
    "\000\002\041\006\000\002\035\003\000\002\035\004\000" +
    "\002\035\003\000\002\034\004\000\002\034\003\000\002" +
    "\040\003\000\002\040\005\000\002\037\003\000\002\037" +
    "\004\000\002\036\005\000\002\036\003\000\002\033\003" +
    "\000\002\033\005\000\002\022\007\000\002\030\005\000" +
    "\002\030\002\000\002\031\003\000\002\031\004\000\002" +
    "\032\005\000\002\032\003\000\002\021\006\000\002\021" +
    "\006\000\002\021\004\000\002\021\007\000\002\020\006" +
    "\000\002\020\007\000\002\024\004\000\002\024\005\000" +
    "\002\023\004\000\002\023\005\000\002\023\006\000\002" +
    "\042\003\000\002\042\006\000\002\043\004\000\002\043" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\004" +
    "\000\002\045\005\000\002\045\004\000\002\047\003\000" +
    "\002\047\005\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\051\005\000\002\052\003\000\002\050" +
    "\003\000\002\050\003\000\002\054\007\000\002\006\005" +
    "\000\002\006\007\000\002\055\007\000\002\003\007\000" +
    "\002\003\010\000\002\003\005\000\002\004\006\000\002" +
    "\004\005\000\002\016\007\000\002\016\006\000\002\015" +
    "\003\000\002\015\004\000\002\015\005\000\002\014\005" +
    "\000\002\014\004\000\002\053\003\000\002\053\006\000" +
    "\002\053\010\000\002\053\006\000\002\053\004\000\002" +
    "\053\007\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\053\003\000\002\053\004" +
    "\000\002\053\004\000\002\053\004\000\002\053\004\000" +
    "\002\011\003\000\002\056\005\000\002\056\003\000\002" +
    "\057\005\000\002\057\003\000\002\060\005\000\002\060" +
    "\003\000\002\061\004\000\002\061\003\000\002\062\005" +
    "\000\002\062\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\063" +
    "\005\000\002\063\003\000\002\065\005\000\002\065\003" +
    "\000\002\066\005\000\002\066\003\000\002\067\005\000" +
    "\002\067\005\000\002\067\003\000\002\070\005\000\002" +
    "\070\005\000\002\070\005\000\002\070\005\000\002\070" +
    "\003\000\002\071\005\000\002\071\005\000\002\071\005" +
    "\000\002\071\005\000\002\071\005\000\002\071\003\000" +
    "\002\072\004\000\002\072\004\000\002\072\004\000\002" +
    "\072\004\000\002\072\003\000\002\074\003\000\002\074" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\017\003\000" +
    "\002\013\003\000\002\013\004\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\014\002\ufffb\003\011\010\006\014\014\044" +
    "\013\001\002\000\066\002\ufff1\004\ufff1\011\ufff1\014\ufff1" +
    "\017\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\033\ufff1\041" +
    "\ufff1\044\ufff1\045\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\054\ufff1\055\ufff1\056\ufff1\057\ufff1\062\ufff1\070\ufff1\100" +
    "\ufff1\112\ufff1\113\ufff1\001\002\000\014\002\ufff9\011\ufff9" +
    "\014\014\033\ufff9\044\013\001\002\000\010\011\ufffb\014" +
    "\014\044\013\001\002\000\004\002\u010d\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\ufffe\001\002\000\010\002" +
    "\ufffc\011\ufffc\033\123\001\002\000\004\060\045\001\002" +
    "\000\006\007\022\057\017\001\002\000\004\016\016\001" +
    "\002\000\066\002\ufff2\004\ufff2\011\ufff2\014\ufff2\017\ufff2" +
    "\020\ufff2\022\ufff2\023\ufff2\024\ufff2\033\ufff2\041\ufff2\044" +
    "\ufff2\045\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2" +
    "\055\ufff2\056\ufff2\057\ufff2\062\ufff2\070\ufff2\100\ufff2\112" +
    "\ufff2\113\ufff2\001\002\000\006\007\uffe2\015\uffe2\001\002" +
    "\000\006\007\026\015\uffeb\001\002\000\004\015\030\001" +
    "\002\000\010\007\uffe9\015\uffe9\057\uffe9\001\002\000\010" +
    "\007\025\015\uffed\057\017\001\002\000\006\007\026\015" +
    "\uffec\001\002\000\010\007\uffea\015\uffea\057\uffea\001\002" +
    "\000\004\057\027\001\002\000\006\007\uffe1\015\uffe1\001" +
    "\002\000\010\026\035\060\034\067\033\001\002\000\010" +
    "\016\uffe6\025\043\027\uffe6\001\002\000\010\016\uffe3\025" +
    "\uffe3\027\uffe3\001\002\000\004\016\ufff0\001\002\000\012" +
    "\013\041\016\uffe8\025\uffe8\027\uffe8\001\002\000\004\060" +
    "\034\001\002\000\004\016\uffee\001\002\000\004\027\040" +
    "\001\002\000\004\016\uffef\001\002\000\004\060\042\001" +
    "\002\000\010\016\uffe7\025\uffe7\027\uffe7\001\002\000\010" +
    "\016\uffe5\027\uffe5\060\034\001\002\000\010\016\uffe4\025" +
    "\uffe4\027\uffe4\001\002\000\006\026\047\031\uffde\001\002" +
    "\000\004\031\057\001\002\000\004\060\053\001\002\000" +
    "\004\027\056\001\002\000\006\025\054\027\uffdd\001\002" +
    "\000\006\025\uffda\027\uffda\001\002\000\012\025\ufff8\027" +
    "\ufff8\031\ufff8\057\ufff8\001\002\000\006\027\uffdc\060\053" +
    "\001\002\000\006\025\uffdb\027\uffdb\001\002\000\004\031" +
    "\uffdf\001\002\000\020\016\065\035\062\036\066\037\063" +
    "\040\070\045\064\060\053\001\002\000\066\002\uffe0\004" +
    "\uffe0\011\uffe0\014\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\033\uffe0\041\uffe0\044\uffe0\045\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0" +
    "\062\uffe0\070\uffe0\100\uffe0\112\uffe0\113\uffe0\001\002\000" +
    "\004\057\ufff3\001\002\000\004\057\ufff6\001\002\000\004" +
    "\057\ufff5\001\002\000\004\016\122\001\002\000\004\010" +
    "\104\001\002\000\004\057\ufff7\001\002\000\004\057\071" +
    "\001\002\000\004\057\ufff4\001\002\000\004\026\073\001" +
    "\002\000\004\016\103\001\002\000\016\027\075\035\062" +
    "\036\066\037\063\040\070\060\053\001\002\000\004\057" +
    "\100\001\002\000\004\016\uffd3\001\002\000\004\027\077" +
    "\001\002\000\004\016\uffd2\001\002\000\006\025\101\027" +
    "\uffd1\001\002\000\016\027\uffd0\035\062\036\066\037\063" +
    "\040\070\060\053\001\002\000\004\027\uffcf\001\002\000" +
    "\066\002\uffd8\004\uffd8\011\uffd8\014\uffd8\017\uffd8\020\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\033\uffd8\041\uffd8\044\uffd8\045" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\062\uffd8\070\uffd8\100\uffd8\112\uffd8\113" +
    "\uffd8\001\002\000\016\035\062\036\066\037\063\040\070" +
    "\045\106\060\053\001\002\000\016\011\115\035\062\036" +
    "\066\037\063\040\070\060\053\001\002\000\004\016\113" +
    "\001\002\000\004\057\110\001\002\000\004\026\073\001" +
    "\002\000\004\016\112\001\002\000\016\011\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\060\uffd5\001\002\000\004\011" +
    "\114\001\002\000\066\002\uffd6\004\uffd6\011\uffd6\014\uffd6" +
    "\017\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\033\uffd6\041" +
    "\uffd6\044\uffd6\045\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\057\uffd6\062\uffd6\070\uffd6\100" +
    "\uffd6\112\uffd6\113\uffd6\001\002\000\066\002\uffd9\004\uffd9" +
    "\011\uffd9\014\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\033\uffd9\041\uffd9\044\uffd9\045\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\062" +
    "\uffd9\070\uffd9\100\uffd9\112\uffd9\113\uffd9\001\002\000\004" +
    "\057\117\001\002\000\004\026\073\001\002\000\004\016" +
    "\121\001\002\000\016\011\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\060\uffd4\001\002\000\066\002\uffd7\004\uffd7\011" +
    "\uffd7\014\uffd7\017\uffd7\020\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\033\uffd7\041\uffd7\044\uffd7\045\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\062\uffd7" +
    "\070\uffd7\100\uffd7\112\uffd7\113\uffd7\001\002\000\004\057" +
    "\125\001\002\000\006\002\ufffd\011\ufffd\001\002\000\110" +
    "\007\uff6a\016\uff6a\025\uff6a\027\uff6a\030\uff6a\031\uff6a\032" +
    "\uff6a\034\uff6a\043\uff6a\046\uff6a\061\uff6a\062\uff6a\063\uff6a" +
    "\064\uff6a\065\uff6a\066\uff6a\067\uff6a\070\uff6a\071\uff6a\072" +
    "\uff6a\073\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a" +
    "\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a\107" +
    "\uff6a\110\uff6a\111\uff6a\001\002\000\004\034\127\001\002" +
    "\000\004\060\053\001\002\000\004\031\132\001\002\000" +
    "\066\002\uffb9\004\uffb9\011\uffb9\014\uffb9\017\uffb9\020\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\033\uffb9\041\uffb9\044\uffb9\045" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\062\uffb9\070\uffb9\100\uffb9\112\uffb9\113" +
    "\uffb9\001\002\000\006\016\134\045\133\001\002\000\004" +
    "\016\u010c\001\002\000\004\010\135\001\002\000\006\012" +
    "\140\045\137\001\002\000\004\011\u010b\001\002\000\004" +
    "\016\u0109\001\002\000\004\057\141\001\002\000\004\026" +
    "\142\001\002\000\006\027\145\057\125\001\002\000\006" +
    "\011\uffb4\012\140\001\002\000\004\011\uffb5\001\002\000" +
    "\004\031\u0107\001\002\000\006\025\u0105\027\uffb1\001\002" +
    "\000\004\027\150\001\002\000\004\031\151\001\002\000" +
    "\054\016\207\017\174\020\220\022\154\023\155\024\153" +
    "\041\167\045\176\050\166\051\206\052\212\053\216\054" +
    "\214\055\213\056\156\057\170\062\173\070\201\100\221" +
    "\112\157\113\202\001\002\000\106\007\uff72\016\uff72\025" +
    "\uff72\027\uff72\030\uff72\031\uff72\032\uff72\043\uff72\046\uff72" +
    "\061\uff72\062\uff72\063\uff72\064\uff72\065\uff72\066\uff72\067" +
    "\uff72\070\uff72\071\uff72\072\uff72\073\uff72\074\uff72\075\uff72" +
    "\076\uff72\077\uff72\100\uff72\101\uff72\102\uff72\103\uff72\104" +
    "\uff72\105\uff72\106\uff72\107\uff72\110\uff72\111\uff72\001\002" +
    "\000\030\017\174\020\220\054\214\055\213\056\156\057" +
    "\125\062\173\070\201\100\221\112\157\113\202\001\002" +
    "\000\006\016\uffa2\032\uffa2\001\002\000\030\017\174\020" +
    "\220\054\214\055\213\056\156\057\125\062\173\070\201" +
    "\100\221\112\157\113\202\001\002\000\106\007\uff6e\016" +
    "\uff6e\025\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\043\uff6e" +
    "\046\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066" +
    "\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e" +
    "\075\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e\102\uff6e\103" +
    "\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\110\uff6e\111\uff6e" +
    "\001\002\000\026\017\174\020\220\054\214\055\213\056" +
    "\156\057\125\062\173\070\201\100\221\112\157\001\002" +
    "\000\056\007\uff87\016\uff87\025\uff87\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\043\uff87\046\uff87\065\uff87\066\uff87\075\uff87" +
    "\076\u0100\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\106" +
    "\uff87\107\uff87\110\uff87\111\uff87\001\002\000\024\007\uff9d" +
    "\016\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\043" +
    "\uff9d\046\uff9d\001\002\000\054\007\uff89\016\uff89\025\uff89" +
    "\027\uff89\030\uff89\031\uff89\032\uff89\043\uff89\046\uff89\065" +
    "\uff89\066\uff89\075\376\101\uff89\102\uff89\103\uff89\104\uff89" +
    "\105\uff89\106\uff89\107\uff89\110\uff89\111\uff89\001\002\000" +
    "\060\007\uff85\016\uff85\025\uff85\027\uff85\030\uff85\031\uff85" +
    "\032\uff85\043\uff85\046\uff85\065\uff85\066\uff85\074\374\075" +
    "\uff85\076\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85" +
    "\106\uff85\107\uff85\110\uff85\111\uff85\001\002\000\106\007" +
    "\uff71\016\uff71\025\uff71\027\uff71\030\uff71\031\uff71\032\uff71" +
    "\043\uff71\046\uff71\061\uff71\062\uff71\063\uff71\064\uff71\065" +
    "\uff71\066\uff71\067\uff71\070\uff71\071\uff71\072\uff71\073\uff71" +
    "\074\uff71\075\uff71\076\uff71\077\uff71\100\uff71\101\uff71\102" +
    "\uff71\103\uff71\104\uff71\105\uff71\106\uff71\107\uff71\110\uff71" +
    "\111\uff71\001\002\000\006\016\371\032\370\001\002\000" +
    "\030\017\174\020\220\054\214\055\213\056\156\057\125" +
    "\062\173\070\201\100\221\112\157\113\202\001\002\000" +
    "\004\057\361\001\002\000\102\007\uff6a\016\uff6a\021\352" +
    "\026\263\032\uff6a\046\uff6a\047\351\061\uff6a\062\uff6a\063" +
    "\uff6a\064\uff6a\065\uff6a\066\uff6a\067\uff6a\070\uff6a\071\uff6a" +
    "\072\uff6a\073\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a\100" +
    "\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a" +
    "\107\uff6a\110\uff6a\111\uff6a\001\002\000\106\007\uff70\016" +
    "\uff70\025\uff70\027\uff70\030\uff70\031\uff70\032\uff70\043\uff70" +
    "\046\uff70\061\uff70\062\uff70\063\uff70\064\uff70\065\uff70\066" +
    "\uff70\067\uff70\070\uff70\071\uff70\072\uff70\073\uff70\074\uff70" +
    "\075\uff70\076\uff70\077\uff70\100\uff70\101\uff70\102\uff70\103" +
    "\uff70\104\uff70\105\uff70\106\uff70\107\uff70\110\uff70\111\uff70" +
    "\001\002\000\006\011\uffb3\012\uffb3\001\002\000\026\017" +
    "\174\020\220\054\214\055\213\056\156\057\125\062\173" +
    "\070\201\100\221\112\157\001\002\000\106\007\uff6c\016" +
    "\uff6c\025\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\043\uff6c" +
    "\046\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c\065\uff6c\066" +
    "\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073\uff6c\074\uff6c" +
    "\075\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c\102\uff6c\103" +
    "\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\110\uff6c\111\uff6c" +
    "\001\002\000\006\016\uffc3\032\uffc3\001\002\000\006\016" +
    "\uffbf\032\uffbf\001\002\000\074\007\uff7d\016\uff7d\025\uff7d" +
    "\027\uff7d\030\uff7d\031\uff7d\032\uff7d\043\uff7d\046\uff7d\062" +
    "\341\064\340\065\uff7d\066\uff7d\070\342\072\uff7d\073\uff7d" +
    "\074\uff7d\075\uff7d\076\uff7d\100\343\101\uff7d\102\uff7d\103" +
    "\uff7d\104\uff7d\105\uff7d\106\uff7d\107\uff7d\110\uff7d\111\uff7d" +
    "\001\002\000\072\004\uffce\005\uffce\006\uffce\011\uffce\012" +
    "\uffce\014\uffce\017\uffce\020\uffce\022\uffce\023\uffce\024\uffce" +
    "\033\uffce\041\uffce\044\uffce\045\uffce\050\uffce\051\uffce\052" +
    "\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\062\uffce" +
    "\070\uffce\100\uffce\112\uffce\113\uffce\001\002\000\026\017" +
    "\174\020\220\054\214\055\213\056\156\057\125\062\173" +
    "\070\201\100\221\112\157\001\002\000\030\017\174\020" +
    "\220\054\214\055\213\056\156\057\125\062\173\070\201" +
    "\100\221\112\157\113\202\001\002\000\030\007\uff99\016" +
    "\uff99\025\uff99\027\uff99\030\uff99\031\uff99\032\uff99\043\uff99" +
    "\046\uff99\110\uff99\111\334\001\002\000\026\007\uff9b\016" +
    "\uff9b\025\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\043\uff9b" +
    "\046\uff9b\110\332\001\002\000\064\007\uff82\016\uff82\025" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\043\uff82\046\uff82" +
    "\065\uff82\066\uff82\072\327\073\326\074\uff82\075\uff82\076" +
    "\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\106\uff82" +
    "\107\uff82\110\uff82\111\uff82\001\002\000\030\017\174\020" +
    "\220\054\214\055\213\056\156\057\125\062\173\070\201" +
    "\100\221\112\157\113\202\001\002\000\004\010\275\001" +
    "\002\000\012\007\260\016\uffac\032\uffac\046\257\001\002" +
    "\000\052\007\uff93\016\uff93\025\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\043\uff93\046\uff93\065\254\066\251\101\253" +
    "\102\250\103\245\104\252\105\246\106\255\107\uff93\110" +
    "\uff93\111\uff93\001\002\000\030\017\174\020\220\054\214" +
    "\055\213\056\156\057\125\062\173\070\201\100\221\112" +
    "\157\113\202\001\002\000\106\007\uff6f\016\uff6f\025\uff6f" +
    "\027\uff6f\030\uff6f\031\uff6f\032\uff6f\043\uff6f\046\uff6f\061" +
    "\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f" +
    "\070\uff6f\071\uff6f\072\uff6f\073\uff6f\074\uff6f\075\uff6f\076" +
    "\uff6f\077\uff6f\100\uff6f\101\uff6f\102\uff6f\103\uff6f\104\uff6f" +
    "\105\uff6f\106\uff6f\107\uff6f\110\uff6f\111\uff6f\001\002\000" +
    "\106\007\uff6d\016\uff6d\025\uff6d\027\uff6d\030\uff6d\031\uff6d" +
    "\032\uff6d\043\uff6d\046\uff6d\061\uff6d\062\uff6d\063\uff6d\064" +
    "\uff6d\065\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d\072\uff6d" +
    "\073\uff6d\074\uff6d\075\uff6d\076\uff6d\077\uff6d\100\uff6d\101" +
    "\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d\106\uff6d\107\uff6d" +
    "\110\uff6d\111\uff6d\001\002\000\106\007\uff77\016\uff77\025" +
    "\uff77\027\uff77\030\uff77\031\uff77\032\uff77\043\uff77\046\uff77" +
    "\061\232\062\uff77\063\236\064\uff77\065\uff77\066\uff77\067" +
    "\234\070\uff77\071\235\072\uff77\073\uff77\074\uff77\075\uff77" +
    "\076\uff77\077\233\100\uff77\101\uff77\102\uff77\103\uff77\104" +
    "\uff77\105\uff77\106\uff77\107\uff77\110\uff77\111\uff77\001\002" +
    "\000\030\017\174\020\220\054\214\055\213\056\156\057" +
    "\125\062\173\070\201\100\221\112\157\113\202\001\002" +
    "\000\006\016\uffc5\032\uffc5\001\002\000\106\007\uff6b\016" +
    "\uff6b\025\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\043\uff6b" +
    "\046\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b\065\uff6b\066" +
    "\uff6b\067\uff6b\070\uff6b\071\uff6b\072\uff6b\073\uff6b\074\uff6b" +
    "\075\uff6b\076\uff6b\077\uff6b\100\uff6b\101\uff6b\102\uff6b\103" +
    "\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b\110\uff6b\111\uff6b" +
    "\001\002\000\026\017\174\020\220\054\214\055\213\056" +
    "\156\057\125\062\173\070\201\100\221\112\157\001\002" +
    "\000\032\007\uff95\016\uff95\025\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\043\uff95\046\uff95\107\uff95\110\uff95\111\uff95" +
    "\001\002\000\032\007\uff97\016\uff97\025\uff97\027\uff97\030" +
    "\uff97\031\uff97\032\uff97\043\uff97\046\uff97\107\226\110\uff97" +
    "\111\uff97\001\002\000\006\016\uffc2\032\uffc2\001\002\000" +
    "\006\016\uffc1\032\uffc1\001\002\000\030\017\174\020\220" +
    "\054\214\055\213\056\156\057\125\062\173\070\201\100" +
    "\221\112\157\113\202\001\002\000\030\007\uff98\016\uff98" +
    "\025\uff98\027\uff98\030\uff98\031\uff98\032\uff98\043\uff98\046" +
    "\uff98\110\uff98\111\uff98\001\002\000\106\007\uff76\016\uff76" +
    "\025\uff76\027\uff76\030\uff76\031\uff76\032\uff76\043\uff76\046" +
    "\uff76\061\uff76\062\uff76\063\uff76\064\uff76\065\uff76\066\uff76" +
    "\067\uff76\070\uff76\071\uff76\072\uff76\073\uff76\074\uff76\075" +
    "\uff76\076\uff76\077\uff76\100\uff76\101\uff76\102\uff76\103\uff76" +
    "\104\uff76\105\uff76\106\uff76\107\uff76\110\uff76\111\uff76\001" +
    "\002\000\006\016\uff9e\032\uff9e\001\002\000\026\017\174" +
    "\020\220\054\214\055\213\056\156\057\125\062\173\070" +
    "\201\100\221\112\157\001\002\000\026\017\174\020\220" +
    "\054\214\055\213\056\156\057\125\062\173\070\201\100" +
    "\221\112\157\001\002\000\026\017\174\020\220\054\214" +
    "\055\213\056\156\057\125\062\173\070\201\100\221\112" +
    "\157\001\002\000\026\017\174\020\220\054\214\055\213" +
    "\056\156\057\125\062\173\070\201\100\221\112\157\001" +
    "\002\000\026\017\174\020\220\054\214\055\213\056\156" +
    "\057\125\062\173\070\201\100\221\112\157\001\002\000" +
    "\074\007\uff7a\016\uff7a\025\uff7a\027\uff7a\030\uff7a\031\uff7a" +
    "\032\uff7a\043\uff7a\046\uff7a\062\uff7a\064\uff7a\065\uff7a\066" +
    "\uff7a\070\uff7a\072\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a" +
    "\100\uff7a\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105\uff7a\106" +
    "\uff7a\107\uff7a\110\uff7a\111\uff7a\001\002\000\074\007\uff78" +
    "\016\uff78\025\uff78\027\uff78\030\uff78\031\uff78\032\uff78\043" +
    "\uff78\046\uff78\062\uff78\064\uff78\065\uff78\066\uff78\070\uff78" +
    "\072\uff78\073\uff78\074\uff78\075\uff78\076\uff78\100\uff78\101" +
    "\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106\uff78\107\uff78" +
    "\110\uff78\111\uff78\001\002\000\074\007\uff7c\016\uff7c\025" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\043\uff7c\046\uff7c" +
    "\062\uff7c\064\uff7c\065\uff7c\066\uff7c\070\uff7c\072\uff7c\073" +
    "\uff7c\074\uff7c\075\uff7c\076\uff7c\100\uff7c\101\uff7c\102\uff7c" +
    "\103\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c\110\uff7c\111" +
    "\uff7c\001\002\000\074\007\uff79\016\uff79\025\uff79\027\uff79" +
    "\030\uff79\031\uff79\032\uff79\043\uff79\046\uff79\062\uff79\064" +
    "\uff79\065\uff79\066\uff79\070\uff79\072\uff79\073\uff79\074\uff79" +
    "\075\uff79\076\uff79\100\uff79\101\uff79\102\uff79\103\uff79\104" +
    "\uff79\105\uff79\106\uff79\107\uff79\110\uff79\111\uff79\001\002" +
    "\000\074\007\uff7b\016\uff7b\025\uff7b\027\uff7b\030\uff7b\031" +
    "\uff7b\032\uff7b\043\uff7b\046\uff7b\062\uff7b\064\uff7b\065\uff7b" +
    "\066\uff7b\070\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076" +
    "\uff7b\100\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b\105\uff7b" +
    "\106\uff7b\107\uff7b\110\uff7b\111\uff7b\001\002\000\006\016" +
    "\uff9f\032\uff9f\001\002\000\026\017\uff8e\020\uff8e\054\uff8e" +
    "\055\uff8e\056\uff8e\057\uff8e\062\uff8e\070\uff8e\100\uff8e\112" +
    "\uff8e\001\002\000\026\017\uff8c\020\uff8c\054\uff8c\055\uff8c" +
    "\056\uff8c\057\uff8c\062\uff8c\070\uff8c\100\uff8c\112\uff8c\001" +
    "\002\000\026\017\174\020\220\054\214\055\213\056\156" +
    "\057\125\062\173\070\201\100\221\112\157\001\002\000" +
    "\026\017\uff8f\020\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f" +
    "\062\uff8f\070\uff8f\100\uff8f\112\uff8f\001\002\000\026\017" +
    "\uff90\020\uff90\054\uff90\055\uff90\056\uff90\057\uff90\062\uff90" +
    "\070\uff90\100\uff90\112\uff90\001\002\000\026\017\uff8b\020" +
    "\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\062\uff8b\070\uff8b" +
    "\100\uff8b\112\uff8b\001\002\000\026\017\uff92\020\uff92\054" +
    "\uff92\055\uff92\056\uff92\057\uff92\062\uff92\070\uff92\100\uff92" +
    "\112\uff92\001\002\000\026\017\uff91\020\uff91\054\uff91\055" +
    "\uff91\056\uff91\057\uff91\062\uff91\070\uff91\100\uff91\112\uff91" +
    "\001\002\000\026\017\uff8d\020\uff8d\054\uff8d\055\uff8d\056" +
    "\uff8d\057\uff8d\062\uff8d\070\uff8d\100\uff8d\112\uff8d\001\002" +
    "\000\032\007\uff94\016\uff94\025\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\043\uff94\046\uff94\107\uff94\110\uff94\111\uff94" +
    "\001\002\000\030\017\174\020\220\054\214\055\213\056" +
    "\156\057\125\062\173\070\201\100\221\112\157\113\202" +
    "\001\002\000\004\057\261\001\002\000\004\026\263\001" +
    "\002\000\010\016\uffab\032\uffab\042\272\001\002\000\032" +
    "\017\174\020\220\027\264\054\214\055\213\056\156\057" +
    "\125\062\173\070\201\100\221\112\157\113\202\001\002" +
    "\000\010\016\uffad\032\uffad\042\uffad\001\002\000\004\027" +
    "\271\001\002\000\006\025\267\027\uff69\001\002\000\032" +
    "\017\174\020\220\027\uff68\054\214\055\213\056\156\057" +
    "\125\062\173\070\201\100\221\112\157\113\202\001\002" +
    "\000\004\027\uff67\001\002\000\010\016\uffae\032\uffae\042" +
    "\uffae\001\002\000\030\017\174\020\220\054\214\055\213" +
    "\056\156\057\125\062\173\070\201\100\221\112\157\113" +
    "\202\001\002\000\006\016\uffaa\032\uffaa\001\002\000\006" +
    "\016\uffa6\032\uffa6\001\002\000\062\004\301\014\014\017" +
    "\174\020\220\022\154\023\155\024\153\033\123\041\167" +
    "\044\013\045\176\050\166\051\206\052\212\053\216\054" +
    "\214\055\213\056\156\057\170\062\173\070\201\100\221" +
    "\112\157\113\202\001\002\000\064\004\uffbd\011\uffbd\014" +
    "\uffbd\017\uffbd\020\uffbd\022\uffbd\023\uffbd\024\uffbd\033\uffbd" +
    "\041\uffbd\044\uffbd\045\uffbd\050\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\062\uffbd\070\uffbd" +
    "\100\uffbd\112\uffbd\113\uffbd\001\002\000\062\004\301\014" +
    "\014\017\174\020\220\022\154\023\155\024\153\033\123" +
    "\041\167\044\013\045\176\050\166\051\206\052\212\053" +
    "\216\054\214\055\213\056\156\057\170\062\173\070\201" +
    "\100\221\112\157\113\202\001\002\000\064\004\uffc9\011" +
    "\uffc9\014\uffc9\017\uffc9\020\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\033\uffc9\041\uffc9\044\uffc9\045\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\062\uffc9" +
    "\070\uffc9\100\uffc9\112\uffc9\113\uffc9\001\002\000\030\017" +
    "\174\020\220\054\214\055\213\056\156\057\125\062\173" +
    "\070\201\100\221\112\157\113\202\001\002\000\064\004" +
    "\301\011\306\014\014\017\174\020\220\022\154\023\155" +
    "\024\153\033\123\041\167\044\013\045\176\050\166\051" +
    "\206\052\212\053\216\054\214\055\213\056\156\057\170" +
    "\062\173\070\201\100\221\112\157\113\202\001\002\000" +
    "\064\004\uffca\011\uffca\014\uffca\017\uffca\020\uffca\022\uffca" +
    "\023\uffca\024\uffca\033\uffca\041\uffca\044\uffca\045\uffca\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\062\uffca\070\uffca\100\uffca\112\uffca\113\uffca\001" +
    "\002\000\064\004\uffbe\011\uffbe\014\uffbe\017\uffbe\020\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\033\uffbe\041\uffbe\044\uffbe\045" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\057\uffbe\062\uffbe\070\uffbe\100\uffbe\112\uffbe\113" +
    "\uffbe\001\002\000\064\004\uffcb\011\uffcb\014\uffcb\017\uffcb" +
    "\020\uffcb\022\uffcb\023\uffcb\024\uffcb\033\uffcb\041\uffcb\044" +
    "\uffcb\045\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\062\uffcb\070\uffcb\100\uffcb\112" +
    "\uffcb\113\uffcb\001\002\000\072\004\uffcd\005\uffcd\006\uffcd" +
    "\011\uffcd\012\uffcd\014\uffcd\017\uffcd\020\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\033\uffcd\041\uffcd\044\uffcd\045\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\062\uffcd\070\uffcd\100\uffcd\112\uffcd\113\uffcd\001\002" +
    "\000\064\004\uffcc\011\uffcc\014\uffcc\017\uffcc\020\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\033\uffcc\041\uffcc\044\uffcc\045\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\062\uffcc\070\uffcc\100\uffcc\112\uffcc\113\uffcc" +
    "\001\002\000\004\031\311\001\002\000\054\016\207\017" +
    "\174\020\220\022\154\023\155\024\153\041\167\045\176" +
    "\050\166\051\206\052\212\053\216\054\214\055\213\056" +
    "\156\057\170\062\173\070\201\100\221\112\157\113\202" +
    "\001\002\000\006\005\313\006\314\001\002\000\004\031" +
    "\322\001\002\000\030\017\174\020\220\054\214\055\213" +
    "\056\156\057\125\062\173\070\201\100\221\112\157\113" +
    "\202\001\002\000\064\004\uffbc\011\uffbc\014\uffbc\017\uffbc" +
    "\020\uffbc\022\uffbc\023\uffbc\024\uffbc\033\uffbc\041\uffbc\044" +
    "\uffbc\045\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\062\uffbc\070\uffbc\100\uffbc\112" +
    "\uffbc\113\uffbc\001\002\000\004\031\317\001\002\000\054" +
    "\016\207\017\174\020\220\022\154\023\155\024\153\041" +
    "\167\045\176\050\166\051\206\052\212\053\216\054\214" +
    "\055\213\056\156\057\170\062\173\070\201\100\221\112" +
    "\157\113\202\001\002\000\006\005\313\006\314\001\002" +
    "\000\064\004\uffba\011\uffba\014\uffba\017\uffba\020\uffba\022" +
    "\uffba\023\uffba\024\uffba\033\uffba\041\uffba\044\uffba\045\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\062\uffba\070\uffba\100\uffba\112\uffba\113\uffba" +
    "\001\002\000\054\016\207\017\174\020\220\022\154\023" +
    "\155\024\153\041\167\045\176\050\166\051\206\052\212" +
    "\053\216\054\214\055\213\056\156\057\170\062\173\070" +
    "\201\100\221\112\157\113\202\001\002\000\064\004\uffbb" +
    "\011\uffbb\014\uffbb\017\uffbb\020\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\033\uffbb\041\uffbb\044\uffbb\045\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\062" +
    "\uffbb\070\uffbb\100\uffbb\112\uffbb\113\uffbb\001\002\000\064" +
    "\004\uffc8\011\uffc8\014\uffc8\017\uffc8\020\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\033\uffc8\041\uffc8\044\uffc8\045\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\062\uffc8\070\uffc8\100\uffc8\112\uffc8\113\uffc8\001\002" +
    "\000\006\016\uffa8\032\uffa8\001\002\000\026\017\174\020" +
    "\220\054\214\055\213\056\156\057\125\062\173\070\201" +
    "\100\221\112\157\001\002\000\026\017\174\020\220\054" +
    "\214\055\213\056\156\057\125\062\173\070\201\100\221" +
    "\112\157\001\002\000\060\007\uff83\016\uff83\025\uff83\027" +
    "\uff83\030\uff83\031\uff83\032\uff83\043\uff83\046\uff83\065\uff83" +
    "\066\uff83\074\uff83\075\uff83\076\uff83\101\uff83\102\uff83\103" +
    "\uff83\104\uff83\105\uff83\106\uff83\107\uff83\110\uff83\111\uff83" +
    "\001\002\000\060\007\uff84\016\uff84\025\uff84\027\uff84\030" +
    "\uff84\031\uff84\032\uff84\043\uff84\046\uff84\065\uff84\066\uff84" +
    "\074\uff84\075\uff84\076\uff84\101\uff84\102\uff84\103\uff84\104" +
    "\uff84\105\uff84\106\uff84\107\uff84\110\uff84\111\uff84\001\002" +
    "\000\030\017\174\020\220\054\214\055\213\056\156\057" +
    "\125\062\173\070\201\100\221\112\157\113\202\001\002" +
    "\000\024\007\uff9c\016\uff9c\025\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\043\uff9c\046\uff9c\001\002\000\030\017\174" +
    "\020\220\054\214\055\213\056\156\057\125\062\173\070" +
    "\201\100\221\112\157\113\202\001\002\000\026\007\uff9a" +
    "\016\uff9a\025\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\043" +
    "\uff9a\046\uff9a\110\uff9a\001\002\000\032\007\uff96\016\uff96" +
    "\025\uff96\027\uff96\030\uff96\031\uff96\032\uff96\043\uff96\046" +
    "\uff96\107\uff96\110\uff96\111\uff96\001\002\000\106\007\uff75" +
    "\016\uff75\025\uff75\027\uff75\030\uff75\031\uff75\032\uff75\043" +
    "\uff75\046\uff75\061\uff75\062\uff75\063\uff75\064\uff75\065\uff75" +
    "\066\uff75\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75\074" +
    "\uff75\075\uff75\076\uff75\077\uff75\100\uff75\101\uff75\102\uff75" +
    "\103\uff75\104\uff75\105\uff75\106\uff75\107\uff75\110\uff75\111" +
    "\uff75\001\002\000\026\017\174\020\220\054\214\055\213" +
    "\056\156\057\125\062\173\070\201\100\221\112\157\001" +
    "\002\000\026\017\174\020\220\054\214\055\213\056\156" +
    "\057\125\062\173\070\201\100\221\112\157\001\002\000" +
    "\026\017\174\020\220\054\214\055\213\056\156\057\125" +
    "\062\173\070\201\100\221\112\157\001\002\000\026\017" +
    "\174\020\220\054\214\055\213\056\156\057\125\062\173" +
    "\070\201\100\221\112\157\001\002\000\064\007\uff81\016" +
    "\uff81\025\uff81\027\uff81\030\uff81\031\uff81\032\uff81\043\uff81" +
    "\046\uff81\065\uff81\066\uff81\072\uff81\073\uff81\074\uff81\075" +
    "\uff81\076\uff81\101\uff81\102\uff81\103\uff81\104\uff81\105\uff81" +
    "\106\uff81\107\uff81\110\uff81\111\uff81\001\002\000\064\007" +
    "\uff80\016\uff80\025\uff80\027\uff80\030\uff80\031\uff80\032\uff80" +
    "\043\uff80\046\uff80\065\uff80\066\uff80\072\uff80\073\uff80\074" +
    "\uff80\075\uff80\076\uff80\101\uff80\102\uff80\103\uff80\104\uff80" +
    "\105\uff80\106\uff80\107\uff80\110\uff80\111\uff80\001\002\000" +
    "\064\007\uff7e\016\uff7e\025\uff7e\027\uff7e\030\uff7e\031\uff7e" +
    "\032\uff7e\043\uff7e\046\uff7e\065\uff7e\066\uff7e\072\uff7e\073" +
    "\uff7e\074\uff7e\075\uff7e\076\uff7e\101\uff7e\102\uff7e\103\uff7e" +
    "\104\uff7e\105\uff7e\106\uff7e\107\uff7e\110\uff7e\111\uff7e\001" +
    "\002\000\064\007\uff7f\016\uff7f\025\uff7f\027\uff7f\030\uff7f" +
    "\031\uff7f\032\uff7f\043\uff7f\046\uff7f\065\uff7f\066\uff7f\072" +
    "\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f\101\uff7f\102\uff7f" +
    "\103\uff7f\104\uff7f\105\uff7f\106\uff7f\107\uff7f\110\uff7f\111" +
    "\uff7f\001\002\000\106\007\uff74\016\uff74\025\uff74\027\uff74" +
    "\030\uff74\031\uff74\032\uff74\043\uff74\046\uff74\061\uff74\062" +
    "\uff74\063\uff74\064\uff74\065\uff74\066\uff74\067\uff74\070\uff74" +
    "\071\uff74\072\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077" +
    "\uff74\100\uff74\101\uff74\102\uff74\103\uff74\104\uff74\105\uff74" +
    "\106\uff74\107\uff74\110\uff74\111\uff74\001\002\000\030\017" +
    "\174\020\220\054\214\055\213\056\156\057\125\062\173" +
    "\070\201\100\221\112\157\113\202\001\002\000\050\017" +
    "\174\020\220\022\154\023\155\024\153\041\167\050\166" +
    "\051\206\052\212\053\216\054\214\055\213\056\156\057" +
    "\356\062\173\070\201\100\221\112\157\113\202\001\002" +
    "\000\004\042\354\001\002\000\030\017\174\020\220\054" +
    "\214\055\213\056\156\057\125\062\173\070\201\100\221" +
    "\112\157\113\202\001\002\000\006\016\uffa9\032\uffa9\001" +
    "\002\000\100\007\uff6a\016\uff6a\026\263\032\uff6a\046\uff6a" +
    "\047\351\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066" +
    "\uff6a\067\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a" +
    "\075\uff6a\076\uff6a\077\uff6a\100\uff6a\101\uff6a\102\uff6a\103" +
    "\uff6a\104\uff6a\105\uff6a\106\uff6a\107\uff6a\110\uff6a\111\uff6a" +
    "\001\002\000\006\016\uffc0\032\uffc0\001\002\000\006\016" +
    "\uffa5\032\uffa5\001\002\000\004\026\263\001\002\000\006" +
    "\016\uffa4\032\uffa4\001\002\000\006\030\364\043\365\001" +
    "\002\000\004\057\366\001\002\000\006\016\uffa3\032\uffa3" +
    "\001\002\000\004\026\263\001\002\000\006\016\uffa7\032" +
    "\uffa7\001\002\000\054\016\372\017\174\020\220\022\154" +
    "\023\155\024\153\041\167\045\176\050\166\051\206\052" +
    "\212\053\216\054\214\055\213\056\156\057\170\062\173" +
    "\070\201\100\221\112\157\113\202\001\002\000\072\004" +
    "\uffc6\005\uffc6\006\uffc6\011\uffc6\012\uffc6\014\uffc6\017\uffc6" +
    "\020\uffc6\022\uffc6\023\uffc6\024\uffc6\033\uffc6\041\uffc6\044" +
    "\uffc6\045\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\062\uffc6\070\uffc6\100\uffc6\112" +
    "\uffc6\113\uffc6\001\002\000\072\004\uffc7\005\uffc7\006\uffc7" +
    "\011\uffc7\012\uffc7\014\uffc7\017\uffc7\020\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\033\uffc7\041\uffc7\044\uffc7\045\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\062\uffc7\070\uffc7\100\uffc7\112\uffc7\113\uffc7\001\002" +
    "\000\006\016\uffc4\032\uffc4\001\002\000\026\017\174\020" +
    "\220\054\214\055\213\056\156\057\125\062\173\070\201" +
    "\100\221\112\157\001\002\000\056\007\uff86\016\uff86\025" +
    "\uff86\027\uff86\030\uff86\031\uff86\032\uff86\043\uff86\046\uff86" +
    "\065\uff86\066\uff86\075\uff86\076\uff86\101\uff86\102\uff86\103" +
    "\uff86\104\uff86\105\uff86\106\uff86\107\uff86\110\uff86\111\uff86" +
    "\001\002\000\026\017\174\020\220\054\214\055\213\056" +
    "\156\057\125\062\173\070\201\100\221\112\157\001\002" +
    "\000\052\007\uff8a\016\uff8a\025\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\043\uff8a\046\uff8a\065\uff8a\066\uff8a\101\uff8a" +
    "\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107\uff8a\110" +
    "\uff8a\111\uff8a\001\002\000\026\017\174\020\220\054\214" +
    "\055\213\056\156\057\125\062\173\070\201\100\221\112" +
    "\157\001\002\000\054\007\uff88\016\uff88\025\uff88\027\uff88" +
    "\030\uff88\031\uff88\032\uff88\043\uff88\046\uff88\065\uff88\066" +
    "\uff88\075\uff88\101\uff88\102\uff88\103\uff88\104\uff88\105\uff88" +
    "\106\uff88\107\uff88\110\uff88\111\uff88\001\002\000\106\007" +
    "\uff73\016\uff73\025\uff73\027\uff73\030\uff73\031\uff73\032\uff73" +
    "\043\uff73\046\uff73\061\uff73\062\uff73\063\uff73\064\uff73\065" +
    "\uff73\066\uff73\067\uff73\070\uff73\071\uff73\072\uff73\073\uff73" +
    "\074\uff73\075\uff73\076\uff73\077\uff73\100\uff73\101\uff73\102" +
    "\uff73\103\uff73\104\uff73\105\uff73\106\uff73\107\uff73\110\uff73" +
    "\111\uff73\001\002\000\006\016\uffa1\032\uffa1\001\002\000" +
    "\006\016\uffa0\032\uffa0\001\002\000\006\027\uffb0\057\125" +
    "\001\002\000\004\027\uffaf\001\002\000\054\016\207\017" +
    "\174\020\220\022\154\023\155\024\153\041\167\045\176" +
    "\050\166\051\206\052\212\053\216\054\214\055\213\056" +
    "\156\057\170\062\173\070\201\100\221\112\157\113\202" +
    "\001\002\000\006\011\uffb2\012\uffb2\001\002\000\004\011" +
    "\u010a\001\002\000\066\002\uffb7\004\uffb7\011\uffb7\014\uffb7" +
    "\017\uffb7\020\uffb7\022\uffb7\023\uffb7\024\uffb7\033\uffb7\041" +
    "\uffb7\044\uffb7\045\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\062\uffb7\070\uffb7\100" +
    "\uffb7\112\uffb7\113\uffb7\001\002\000\066\002\uffb8\004\uffb8" +
    "\011\uffb8\014\uffb8\017\uffb8\020\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\033\uffb8\041\uffb8\044\uffb8\045\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\062" +
    "\uffb8\070\uffb8\100\uffb8\112\uffb8\113\uffb8\001\002\000\066" +
    "\002\uffb6\004\uffb6\011\uffb6\014\uffb6\017\uffb6\020\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\033\uffb6\041\uffb6\044\uffb6\045\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\062\uffb6\070\uffb6\100\uffb6\112\uffb6\113\uffb6" +
    "\001\002\000\004\002\001\001\002\000\004\011\u010f\001" +
    "\002\000\004\002\000\001\002\000\010\002\ufffa\011\ufffa" +
    "\033\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\016\005\006\022\003\025\004\026\011\027" +
    "\007\041\014\001\001\000\002\001\001\000\012\022\003" +
    "\025\004\026\u010f\041\014\001\001\000\014\022\003\025" +
    "\004\026\011\027\u010d\041\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\123\001" +
    "\001\000\002\001\001\000\010\033\017\034\022\035\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\036\030" +
    "\037\035\040\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\036\030" +
    "\037\036\040\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\043\001\001\000\002\001\001\000\004\030" +
    "\045\001\001\000\002\001\001\000\010\010\051\031\047" +
    "\032\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\066\010" +
    "\060\021\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\071\001\001\000\002\001\001\000" +
    "\010\007\073\010\060\023\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\073\010\060\023\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\106\010" +
    "\060\020\104\001\001\000\006\007\115\010\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\127" +
    "\001\001\000\004\003\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\142\001\001\000\006\015\146" +
    "\017\145\001\001\000\004\004\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\011\207\012\163\017\170\042" +
    "\171\045\177\046\216\047\164\051\174\052\223\053\224" +
    "\056\160\057\203\060\202\061\222\062\221\063\210\065" +
    "\161\066\157\067\162\070\204\071\176\072\214\074\151" +
    "\001\001\000\002\001\001\000\042\011\u0103\012\163\017" +
    "\170\056\160\057\203\060\202\061\222\062\221\063\210" +
    "\065\161\066\157\067\162\070\204\071\176\072\214\074" +
    "\151\001\001\000\002\001\001\000\042\011\u0102\012\163" +
    "\017\170\056\160\057\203\060\202\061\222\062\221\063" +
    "\210\065\161\066\157\067\162\070\204\071\176\072\214" +
    "\074\151\001\001\000\002\001\001\000\012\012\163\017" +
    "\170\072\u0101\074\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\011\362\012\163\017\170" +
    "\056\160\057\203\060\202\061\222\062\221\063\210\065" +
    "\161\066\157\067\162\070\204\071\176\072\214\074\151" +
    "\001\001\000\002\001\001\000\004\014\352\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\163\017\170" +
    "\072\347\074\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\163\017\170\072\336\074\151\001\001\000" +
    "\032\012\163\017\170\061\335\062\221\063\210\065\161" +
    "\066\157\067\162\070\204\071\176\072\214\074\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\011\324\012\163\017\170\056\160\057\203\060" +
    "\202\061\222\062\221\063\210\065\161\066\157\067\162" +
    "\070\204\071\176\072\214\074\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\246\001\001\000\042" +
    "\011\243\012\163\017\170\056\160\057\203\060\202\061" +
    "\222\062\221\063\210\065\161\066\157\067\162\070\204" +
    "\071\176\072\214\074\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\011\230\012\163" +
    "\017\170\056\160\057\203\060\202\061\222\062\221\063" +
    "\210\065\161\066\157\067\162\070\204\071\176\072\214" +
    "\074\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\163\017\170\072\227\074\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\012\163\017\170\060\226\061\222\062\221" +
    "\063\210\065\161\066\157\067\162\070\204\071\176\072" +
    "\214\074\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\163\017\170\071\242\072" +
    "\214\074\151\001\001\000\014\012\163\017\170\071\241" +
    "\072\214\074\151\001\001\000\014\012\163\017\170\071" +
    "\240\072\214\074\151\001\001\000\014\012\163\017\170" +
    "\071\237\072\214\074\151\001\001\000\014\012\163\017" +
    "\170\071\236\072\214\074\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\163\017\170\062\255\063\210\065" +
    "\161\066\157\067\162\070\204\071\176\072\214\074\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\011\273\012\163\017\170\056" +
    "\160\057\203\060\202\061\222\062\221\063\210\065\161" +
    "\066\157\067\162\070\204\071\176\072\214\074\151\001" +
    "\001\000\002\001\001\000\004\014\261\001\001\000\002" +
    "\001\001\000\044\011\265\012\163\013\264\017\170\056" +
    "\160\057\203\060\202\061\222\062\221\063\210\065\161" +
    "\066\157\067\162\070\204\071\176\072\214\074\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\011\265\012\163\013\267\017\170\056\160\057" +
    "\203\060\202\061\222\062\221\063\210\065\161\066\157" +
    "\067\162\070\204\071\176\072\214\074\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\011\272\012\163" +
    "\017\170\056\160\057\203\060\202\061\222\062\221\063" +
    "\210\065\161\066\157\067\162\070\204\071\176\072\214" +
    "\074\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\011\207\012\163\017\170\022\003\025\276\041\014" +
    "\043\301\044\304\045\302\046\216\047\164\050\277\051" +
    "\174\052\223\053\224\054\303\055\275\056\160\057\203" +
    "\060\202\061\222\062\221\063\210\065\161\066\157\067" +
    "\162\070\204\071\176\072\214\074\151\001\001\000\002" +
    "\001\001\000\074\011\207\012\163\017\170\022\003\025" +
    "\276\041\014\044\323\045\302\046\216\047\164\050\277" +
    "\051\174\052\223\053\224\054\303\055\275\056\160\057" +
    "\203\060\202\061\222\062\221\063\210\065\161\066\157" +
    "\067\162\070\204\071\176\072\214\074\151\001\001\000" +
    "\002\001\001\000\042\011\307\012\163\017\170\056\160" +
    "\057\203\060\202\061\222\062\221\063\210\065\161\066" +
    "\157\067\162\070\204\071\176\072\214\074\151\001\001" +
    "\000\074\011\207\012\163\017\170\022\003\025\276\041" +
    "\014\044\306\045\302\046\216\047\164\050\277\051\174" +
    "\052\223\053\224\054\303\055\275\056\160\057\203\060" +
    "\202\061\222\062\221\063\210\065\161\066\157\067\162" +
    "\070\204\071\176\072\214\074\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\011\207\012" +
    "\163\017\170\042\311\045\177\046\216\047\164\051\174" +
    "\052\223\053\224\056\160\057\203\060\202\061\222\062" +
    "\221\063\210\065\161\066\157\067\162\070\204\071\176" +
    "\072\214\074\151\001\001\000\004\006\314\001\001\000" +
    "\002\001\001\000\042\011\315\012\163\017\170\056\160" +
    "\057\203\060\202\061\222\062\221\063\210\065\161\066" +
    "\157\067\162\070\204\071\176\072\214\074\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\011\207\012" +
    "\163\017\170\042\317\045\177\046\216\047\164\051\174" +
    "\052\223\053\224\056\160\057\203\060\202\061\222\062" +
    "\221\063\210\065\161\066\157\067\162\070\204\071\176" +
    "\072\214\074\151\001\001\000\004\006\320\001\001\000" +
    "\002\001\001\000\060\011\207\012\163\017\170\042\322" +
    "\045\177\046\216\047\164\051\174\052\223\053\224\056" +
    "\160\057\203\060\202\061\222\062\221\063\210\065\161" +
    "\066\157\067\162\070\204\071\176\072\214\074\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\163\017\170\067\330\070\204\071\176\072" +
    "\214\074\151\001\001\000\020\012\163\017\170\067\327" +
    "\070\204\071\176\072\214\074\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\012\163\017\170\056\332" +
    "\057\203\060\202\061\222\062\221\063\210\065\161\066" +
    "\157\067\162\070\204\071\176\072\214\074\151\001\001" +
    "\000\002\001\001\000\036\012\163\017\170\057\334\060" +
    "\202\061\222\062\221\063\210\065\161\066\157\067\162" +
    "\070\204\071\176\072\214\074\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\163" +
    "\017\170\070\346\071\176\072\214\074\151\001\001\000" +
    "\016\012\163\017\170\070\345\071\176\072\214\074\151" +
    "\001\001\000\016\012\163\017\170\070\344\071\176\072" +
    "\214\074\151\001\001\000\016\012\163\017\170\070\343" +
    "\071\176\072\214\074\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\011\357\012\163\017\170\056\160\057" +
    "\203\060\202\061\222\062\221\063\210\065\161\066\157" +
    "\067\162\070\204\071\176\072\214\074\151\001\001\000" +
    "\044\011\207\012\163\017\170\053\356\056\160\057\203" +
    "\060\202\061\222\062\221\063\210\065\161\066\157\067" +
    "\162\070\204\071\176\072\214\074\151\001\001\000\002" +
    "\001\001\000\042\011\354\012\163\017\170\056\160\057" +
    "\203\060\202\061\222\062\221\063\210\065\161\066\157" +
    "\067\162\070\204\071\176\072\214\074\151\001\001\000" +
    "\002\001\001\000\004\014\352\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\366\001\001\000\002\001\001\000\052\011" +
    "\207\012\163\017\170\046\372\051\174\052\223\053\224" +
    "\056\160\057\203\060\202\061\222\062\221\063\210\065" +
    "\161\066\157\067\162\070\204\071\176\072\214\074\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\012\163\017\170\066\374\067\162\070\204" +
    "\071\176\072\214\074\151\001\001\000\002\001\001\000" +
    "\026\012\163\017\170\063\376\065\161\066\157\067\162" +
    "\070\204\071\176\072\214\074\151\001\001\000\002\001" +
    "\001\000\024\012\163\017\170\065\u0100\066\157\067\162" +
    "\070\204\071\176\072\214\074\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u0105\017\145\001\001\000\002\001\001\000" +
    "\060\011\207\012\163\017\170\042\u0107\045\177\046\216" +
    "\047\164\051\174\052\223\053\224\056\160\057\203\060" +
    "\202\061\222\062\221\063\210\065\161\066\157\067\162" +
    "\070\204\071\176\072\214\074\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ProcessGrm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ProcessGrm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ProcessGrm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 
    ProcessGrmUtil util;
    
    public static final Variable DUMMY_VAR = new Variable("?");
 
	public List<ErrorMessage> errors;
	
	public String filename;
	
	public TypeEquality typeEq = new TypeEquality();
	
	ProcessGrm(List<ErrorMessage> errors, String filename, java.io.InputStream in, IFileLoader fileLoader){
		this(new ProcessLexer(in));
		this.errors = errors;
		((ProcessLexer)getScanner()).errors = errors;
        this.filename = filename;
        this.util = new ProcessGrmUtil(errors, fileLoader);
	}
	
	SourceLocation getLocation(int line, int col) {
	   return new SourceLocation(filename, line + 1, col + 1);
	}
		
    /**
     * Print the error message.
     * @param msg The message
     * @param current The token where the error was detected
     */
    public void report_error (String msg, java_cup.runtime.Symbol info) {
        SourceLocation loc = info.left != -1 ? getLocation(info.left, info.right) : null;
        errors.add(new SyntacticError(loc, msg));
    }
    
    public void syntax_error(Symbol cur_token) {
        SourceLocation loc = cur_token.left != -1 ? getLocation(cur_token.left, cur_token.right) : null;
        String result = cur_token.value == null ? "." : " at '" + cur_token.value + "'";
        errors.add(new SyntacticError(loc, "Syntax error" + result));
    }
    
    public void unrecovered_syntax_error(Symbol cur_token) {
      report_fatal_error("Couldn't repair and continue parse!", cur_token);
    }

    public void report_fatal_error(
    String   message, 
    Object   info)
    {
      /* stop parsing (not really necessary since we throw an exception, but) */
      done_parsing();

      /* use the normal error message reporting to put out the message */
      report_error(message, info);
    }
    
    public CallasType getType(SourceLocation loc, org.tyco.common.symbol.Symbol name) {
        return util.getType(loc, name);
    }
    
    public void setType(RecursiveType t) {
        util.setType(t);
    }
    
    public Map<org.tyco.common.symbol.Symbol, RecursiveType> importTypes(SourceLocation loc, String resource) {
        return util.importTypes(loc, resource);
    }

    public Map<org.tyco.common.symbol.Symbol, RecursiveType> importTypes(SourceLocation loc, String resource, List<Pair<org.tyco.common.symbol.Symbol,org.tyco.common.symbol.Symbol>> imports) {
        return util.importTypes(loc, resource, imports);
    }
    
    public void assemble(SourceLocation loc, org.tyco.common.symbol.Symbol selfType, Map<org.tyco.common.symbol.Symbol, FunctionType> body, List<CallasType> extended) {
        util.assemble(loc, selfType, body, extended);
    }
    
    public void updateImported(Map<org.tyco.common.symbol.Symbol, RecursiveType> importedTypes) {
        util.updateImported(importedTypes);
    }
    
    public Map<org.tyco.common.symbol.Symbol, RecursiveType> getTypes() {
        return util.getTypes();
    }
    
    public CallasProcess composeBody(List<CallasProcess> processes) {
        return util.composeBody(processes);
    }
    
    //Generates a new name for a variable (used in install)
    public String newVariableName(){
    	Random rand1 = new Random();
    	String str1 = Long.toString(rand1.nextLong());  
    	return "__var" + str1;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ProcessGrm$actions {
  private final ProcessGrm parser;

  /** Constructor */
  CUP$ProcessGrm$actions(ProcessGrm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ProcessGrm$do_action(
    int                        CUP$ProcessGrm$act_num,
    java_cup.runtime.lr_parser CUP$ProcessGrm$parser,
    java.util.Stack            CUP$ProcessGrm$stack,
    int                        CUP$ProcessGrm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ProcessGrm$result;

      /* select the action based on the action number */
      switch (CUP$ProcessGrm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // value_list ::= value COMMA value_list 
            {
              List RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List vs = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = vs; RESULT.add(0, v);
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(9/*value_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // value_list ::= value COMMA 
            {
              List RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = new LinkedList(); RESULT.add(v); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(9/*value_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // value_list ::= value 
            {
              List RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new LinkedList(); RESULT.add(v); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(9/*value_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // var ::= ID 
            {
              Variable RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		org.tyco.common.symbol.Symbol n = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Variable(parser.getLocation(nleft, nright), n); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(13/*var*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // builtin ::= FALSE 
            {
              CallasValue RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new BBool(parser.getLocation(xleft, xright), false);
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(8/*builtin*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // builtin ::= TRUE 
            {
              CallasValue RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new BBool(parser.getLocation(xleft, xright), true);
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(8/*builtin*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // builtin ::= STRING 
            {
              CallasValue RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		java.lang.String x = (java.lang.String)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new BString(parser.getLocation(xleft, xright), x);
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(8/*builtin*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // builtin ::= DOUBLE 
            {
              CallasValue RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		java.lang.Double x = (java.lang.Double)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new BDouble(parser.getLocation(xleft, xright), x.doubleValue());
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(8/*builtin*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // builtin ::= LONG 
            {
              CallasValue RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		java.lang.Long x = (java.lang.Long)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new BLong(parser.getLocation(xleft, xright), x.longValue());
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(8/*builtin*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // atom ::= var 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(58/*atom*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // atom ::= builtin 
            {
              CallasValue RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue b = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = b; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(58/*atom*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // factor ::= atom 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(56/*factor*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // factor ::= LONG_NOT factor 
            {
              CallasValue RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		UnaryOperator op = (UnaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new UnaryOperation(loc, op, v);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(56/*factor*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // factor ::= DOUBLE_SUBTRACTION factor 
            {
              CallasValue RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new UnaryOperation(loc, UnaryOperator.DOUBLE_NEGATION, v);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(56/*factor*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // factor ::= LONG_SUBTRACTION factor 
            {
              CallasValue RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new UnaryOperation(loc, UnaryOperator.LONG_NEGATION, v);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(56/*factor*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // factor ::= LONG_ADDITION factor 
            {
              CallasValue RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        RESULT = v;
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(56/*factor*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // term ::= factor 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(55/*term*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // term ::= factor LONG_DIVISION term 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(55/*term*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // term ::= factor LONG_MODULUS term 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(55/*term*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // term ::= factor DOUBLE_DIVISION term 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(55/*term*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // term ::= factor DOUBLE_MULTIPLICATION term 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(55/*term*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // term ::= factor LONG_MULTIPLICATION term 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(55/*term*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // arith_expr ::= term 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(54/*arith_expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // arith_expr ::= term DOUBLE_SUBTRACTION arith_expr 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(54/*arith_expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // arith_expr ::= term DOUBLE_ADDITION arith_expr 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(54/*arith_expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // arith_expr ::= term LONG_SUBTRACTION arith_expr 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(54/*arith_expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // arith_expr ::= term LONG_ADDITION arith_expr 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(54/*arith_expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // shift_expr ::= arith_expr 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(53/*shift_expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // shift_expr ::= arith_expr LONG_SHIFT_RIGHT shift_expr 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(53/*shift_expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // shift_expr ::= arith_expr LONG_SHIFT_LEFT shift_expr 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(53/*shift_expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // and_expr ::= shift_expr 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(52/*and_expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // and_expr ::= shift_expr LONG_AND and_expr 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(52/*and_expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // xor_expr ::= and_expr 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(51/*xor_expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // xor_expr ::= and_expr LONG_EXCLUSIVE_OR xor_expr 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(51/*xor_expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr ::= xor_expr 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(49/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr ::= xor_expr LONG_OR expr 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(49/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // comp_op ::= LONG_DIFFERENT 
            {
              BinaryOperator RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		BinaryOperator v = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(50/*comp_op*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // comp_op ::= LONG_LESS_THAN_EQUALS 
            {
              BinaryOperator RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		BinaryOperator v = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(50/*comp_op*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // comp_op ::= LONG_GREATER_THAN_EQUALS 
            {
              BinaryOperator RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		BinaryOperator v = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(50/*comp_op*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // comp_op ::= LONG_EQUALS 
            {
              BinaryOperator RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		BinaryOperator v = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(50/*comp_op*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comp_op ::= LONG_GREATER_THAN 
            {
              BinaryOperator RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		BinaryOperator v = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(50/*comp_op*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comp_op ::= DOUBLE_GREATER_THAN 
            {
              BinaryOperator RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		BinaryOperator v = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(50/*comp_op*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comp_op ::= DOUBLE_LESS_THAN 
            {
              BinaryOperator RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		BinaryOperator v = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(50/*comp_op*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // comp_op ::= LONG_LESS_THAN 
            {
              BinaryOperator RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		BinaryOperator v = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(50/*comp_op*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // comparison ::= expr 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(48/*comparison*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // comparison ::= expr comp_op comparison 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(48/*comparison*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // not_test ::= comparison 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(47/*not_test*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // not_test ::= BOOL_NOT not_test 
            {
              CallasValue RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		UnaryOperator op = (UnaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new UnaryOperation(loc, op, v);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(47/*not_test*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // and_test ::= not_test 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(46/*and_test*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // and_test ::= not_test BOOL_AND and_test 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(46/*and_test*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // xor_test ::= and_test 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(45/*xor_test*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // xor_test ::= and_test BOOL_EXCLUSIVE_OR xor_test 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(45/*xor_test*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // or_test ::= xor_test 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(44/*or_test*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // or_test ::= xor_test BOOL_OR or_test 
            {
              CallasValue RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue v1 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v2 = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(opleft, opright);
        RESULT = new BinaryOperation(loc, v1, op, v2);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(44/*or_test*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // value ::= or_test 
            {
              CallasValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(7/*value*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // proc_stmt ::= CLOSE value 
            {
              CallasProcess RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Close(parser.getLocation(xleft, xright), v); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // proc_stmt ::= OPEN value 
            {
              CallasProcess RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Open(parser.getLocation(xleft, xright), v); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // proc_stmt ::= INSTALL value 
            {
              CallasProcess RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		  
        SourceLocation loc = parser.getLocation(xleft, xright);
        String varName = parser.newVariableName();
        Variable var = new Variable(loc, varName);
        LoadSensorCode p1 = new LoadSensorCode(loc);
        Update p2 = new Update(loc,var,v);
        StoreSensorCode p3 = new StoreSensorCode(loc,var);
        Let let1 = new Let(var,p2,p3);
        Let let2 = new Let(var,p1,let1);
        RESULT = let2;
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // proc_stmt ::= STORE value 
            {
              CallasProcess RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new StoreSensorCode(parser.getLocation(xleft, xright), v); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // proc_stmt ::= LOAD 
            {
              CallasProcess RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new LoadSensorCode(parser.getLocation(xleft, xright)); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // proc_stmt ::= SELECT value RECEIVE 
            {
              CallasProcess RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Receive(parser.getLocation(tleft,tright),v); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // proc_stmt ::= EXTERN ID arguments 
            {
              CallasProcess RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		org.tyco.common.symbol.Symbol name = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Extern(parser.getLocation(eleft, eright), name, args); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // proc_stmt ::= ID MERGE_ASSIGN value 
            {
              CallasProcess RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		org.tyco.common.symbol.Symbol n = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 
    		SourceLocation loc = parser.getLocation(nleft, nright);
            Variable var = new Variable(loc, n); 
            Update up = new Update(parser.getLocation(ileft,iright),var,v);
            RESULT = new Assignment(var, up);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // proc_stmt ::= value MERGE value 
            {
              CallasProcess RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasValue left = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue right = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Update(parser.getLocation(ileft, iright), left, right); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // proc_stmt ::= SELECT value SEND ID arguments 
            {
              CallasProcess RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int functionleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		org.tyco.common.symbol.Symbol function = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Send(parser.getLocation(tleft,tright), v, function, a); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // proc_stmt ::= KILL value 
            {
              CallasProcess RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Kill(parser.getLocation(xleft, xright), v); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // proc_stmt ::= ID arguments EVERY value 
            {
              CallasProcess RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		org.tyco.common.symbol.Symbol f = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int evrleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int evrright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue evr = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(fleft, fright);
        String varName = parser.newVariableName();
        Variable var = new Variable(loc, varName); 
        LoadSensorCode l = new LoadSensorCode(loc);
        Timer t = new Timer(loc, var, f, a, evr);
        RESULT = new Let(var, l, t);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // proc_stmt ::= value DOT ID arguments EVERY value 
            {
              CallasProcess RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-5)).right;
		CallasValue m = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		org.tyco.common.symbol.Symbol f = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int evrleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int evrright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue evr = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Timer(parser.getLocation(fleft,fright),m, f, a, evr); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-5)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // proc_stmt ::= value DOT ID arguments 
            {
              CallasProcess RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		org.tyco.common.symbol.Symbol id = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Call(v, id, (List<CallasValue>)args);
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // proc_stmt ::= value 
            {
              CallasProcess RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT=v; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(41/*proc_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arguments ::= LPAREN RPAREN 
            {
              List RESULT = null;
		 RESULT = new LinkedList<CallasValue>(); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(10/*arguments*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arguments ::= LPAREN value_list RPAREN 
            {
              List RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = args; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(10/*arguments*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // id_list ::= var COMMA id_list 
            {
              List RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		Variable id = (Variable)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List vl = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = vl; RESULT.add(0, id); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(11/*id_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // id_list ::= var COMMA 
            {
              List RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		Variable id = (Variable)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = new LinkedList<Variable>(); RESULT.add(id); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(11/*id_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // id_list ::= var 
            {
              List RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Variable id = (Variable)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new LinkedList<Variable>(); RESULT.add(id); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(11/*id_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // process_abstraction ::= LPAREN RPAREN COLON suite 
            {
              ProcessAbstraction RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 
            SourceLocation l = parser.getLocation(xleft, xright);
            RESULT = new ProcessAbstraction(l, Collections.EMPTY_LIST, p);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(12/*process_abstraction*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // process_abstraction ::= LPAREN id_list RPAREN COLON suite 
            {
              ProcessAbstraction RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 
            SourceLocation l = parser.getLocation(xleft, xright);
            RESULT = new ProcessAbstraction(l, a, p);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(12/*process_abstraction*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // proc_abs_map ::= DEF ID process_abstraction 
            {
              Map RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		org.tyco.common.symbol.Symbol n = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		ProcessAbstraction p = (ProcessAbstraction)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
            RESULT = new HashMap();
            RESULT.put(n, p);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(2/*proc_abs_map*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // proc_abs_map ::= DEF ID process_abstraction proc_abs_map 
            {
              Map RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		org.tyco.common.symbol.Symbol n = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		ProcessAbstraction p = (ProcessAbstraction)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Map m = (Map)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
            RESULT = m;
            RESULT.put(n, p);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(2/*proc_abs_map*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // module_body ::= COLON PASSKW NL 
            {
              Map RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = new HashMap(); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(1/*module_body*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // module_body ::= COLON NL INDENT PASSKW NL DEDENT 
            {
              Map RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		 RESULT = new HashMap(); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(1/*module_body*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-5)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // module_body ::= COLON NL INDENT proc_abs_map DEDENT 
            {
              Map RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		Map m = (Map)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = m; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(1/*module_body*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // moduledef ::= MODULE var OF type_name module_body 
            {
              CallasProcess RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		CallasType n = (CallasType)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Map m = (Map)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
            final CodeType t;
            if (n instanceof RecursiveType && ((RecursiveType)n).type instanceof CodeType) {
                t = (CodeType) parser.typeEq.unfold((RecursiveType)n);
            } else {
                parser.errors.add(new SyntacticError(n.getSourceLocation(), "Undefined type '" + n + "'"));
                t = CodeType.NIL_TYPE;
            }
            Code code = new Code(parser.getLocation(sleft, sright), m, t);
            RESULT = new Assignment(v, code);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(43/*moduledef*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // elif ::= ELIF value COLON suite elif 
            {
              CallasProcess RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		CallasProcess p1 = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p2 = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Branch(parser.getLocation(ileft, iright), v, p1, p2); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(4/*elif*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // elif ::= ELSE COLON suite 
            {
              CallasProcess RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = p; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(4/*elif*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_stmt ::= IF value COLON suite elif 
            {
              CallasProcess RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		CallasValue v = (CallasValue)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		CallasProcess p1 = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p2 = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Branch(parser.getLocation(ileft, iright), v, p1, p2); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(42/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // compound_stmt ::= moduledef 
            {
              CallasProcess RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = p; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(38/*compound_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // compound_stmt ::= if_stmt 
            {
              CallasProcess RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = p; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(38/*compound_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pass_stmt ::= PASSKW 
            {
              CallasProcess RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(xleft, xright);
        RESULT = new Code(loc);
    
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(40/*pass_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_stmt ::= ID EQUAL proc_stmt 
            {
              CallasProcess RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		org.tyco.common.symbol.Symbol n = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
            SourceLocation loc = parser.getLocation(nleft, nright);
            Variable name = new Variable(loc, n); 
            RESULT = new Assignment(name, p);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(39/*expr_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // small_stmt ::= proc_stmt 
            {
              CallasProcess RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = p; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(36/*small_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // small_stmt ::= pass_stmt 
            {
              CallasProcess RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = p; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(36/*small_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // small_stmt ::= expr_stmt 
            {
              CallasProcess RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = p; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(36/*small_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // small_stmts ::= small_stmts SEMICOLON small_stmt 
            {
              List RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		List r = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess s = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
            RESULT = r;
            RESULT.add(s);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(37/*small_stmts*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // small_stmts ::= small_stmt 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess s = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(s);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(37/*small_stmts*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simple_stmt ::= small_stmts NL 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = s; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(35/*simple_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simple_stmt ::= small_stmts SEMICOLON NL 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		 RESULT = s; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(35/*simple_stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= typereg stmt 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List p = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
            RESULT = p;
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(34/*stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= compound_stmt 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(p);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(34/*stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= simple_stmt 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List p = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = p; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(34/*stmt*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmts ::= stmt 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
            RESULT = s;
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(33/*stmts*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmts ::= stmts stmt 
            {
              List RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		List r = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
            RESULT = r;
            RESULT.addAll(s);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(33/*stmts*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // suite ::= NL INDENT stmts DEDENT 
            {
              CallasProcess RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = parser.composeBody(s); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(32/*suite*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // suite ::= simple_stmt 
            {
              CallasProcess RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = parser.composeBody(s); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(32/*suite*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // typed_id_list ::= type ID COMMA typed_id_list 
            {
              List RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		CallasType t = (CallasType)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List vl = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = vl; RESULT.add(0, t); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(17/*typed_id_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // typed_id_list ::= type ID COMMA 
            {
              List RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		CallasType t = (CallasType)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		 RESULT = new LinkedList(); RESULT.add(t); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(17/*typed_id_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // typed_id_list ::= type ID 
            {
              List RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		CallasType t = (CallasType)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = new LinkedList(); RESULT.add(t); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(17/*typed_id_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // typedef_args ::= LPAREN typed_id_list RPAREN 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = l; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(18/*typedef_args*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // typedef_args ::= LPAREN RPAREN 
            {
              List RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(18/*typedef_args*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // typedef_map ::= typedef_map type ID typedef_args NL 
            {
              Map RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).right;
		Map ts = (Map)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		CallasType t = (CallasType)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		org.tyco.common.symbol.Symbol l = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		
        RESULT = ts;
        SourceLocation loc = parser.getLocation(tleft, tright);
        FunctionType ft = new FunctionType(loc, args, t);
        RESULT.put(l, ft);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(14/*typedef_map*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // typedef_map ::= type ID typedef_args NL 
            {
              Map RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		CallasType t = (CallasType)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		org.tyco.common.symbol.Symbol l = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		
        RESULT = new HashMap();
        SourceLocation loc = parser.getLocation(tleft, tright);
        FunctionType ft = new FunctionType(loc, args, t);
        RESULT.put(l, ft);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(14/*typedef_map*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // typedef_body ::= NL INDENT PASSKW NL DEDENT 
            {
              Map RESULT = null;
		 RESULT = new HashMap(); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(15/*typedef_body*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // typedef_body ::= PASSKW NL 
            {
              Map RESULT = null;
		 RESULT = new HashMap(); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(15/*typedef_body*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // typedef_body ::= type ID typedef_args NL 
            {
              Map RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		CallasType t = (CallasType)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		org.tyco.common.symbol.Symbol l = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		
        RESULT = new HashMap();
        SourceLocation loc = parser.getLocation(tleft, tright);
        FunctionType ft = new FunctionType(loc, args, t);
        RESULT.put(l, ft);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(15/*typedef_body*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typedef_body ::= NL INDENT typedef_map DEDENT 
            {
              Map RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		Map m = (Map)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = m; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(15/*typedef_body*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // typename_list_rest ::= type_name 
            {
              List RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasType n = (CallasType)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        RESULT = new LinkedList();
        RESULT.add(n);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(24/*typename_list_rest*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // typename_list_rest ::= typename_list_rest COMMA type_name 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasType n = (CallasType)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        RESULT = l;
        RESULT.add(n);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(24/*typename_list_rest*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // typename_list ::= typename_list_rest COMMA 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = l; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(23/*typename_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // typename_list ::= typename_list_rest 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = l; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(23/*typename_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // typedef_extends ::= 
            {
              List RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(22/*typedef_extends*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // typedef_extends ::= LPAREN typename_list RPAREN 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = l; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(22/*typedef_extends*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // typedef ::= DEFMOD TYPE_NAME typedef_extends COLON typedef_body 
            {
              RecursiveType RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		org.tyco.common.symbol.Symbol n = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Map b = (Map)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(xleft, xright);
        parser.assemble(loc, n, b, l);
        CodeType ct = new CodeType(loc, b);
        RESULT = new RecursiveType(loc, new TypeVariable(n), ct);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(16/*typedef*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dotted_name ::= dotted_name DOT ID 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		org.tyco.common.symbol.Symbol m = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = n + "." + m; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(25/*dotted_name*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dotted_name ::= ID 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		org.tyco.common.symbol.Symbol n = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = n.toString(); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(25/*dotted_name*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // import_as_names_list ::= import_as_name 
            {
              List RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Pair n = (Pair)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        RESULT = new LinkedList();
        RESULT.add(n);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(28/*import_as_names_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // import_as_names_list ::= import_as_names_list COMMA import_as_name 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Pair n = (Pair)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        RESULT = l;
        RESULT.add(n);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(28/*import_as_names_list*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // import_as_names ::= import_as_names_list COMMA 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = l; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(29/*import_as_names*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // import_as_names ::= import_as_names_list 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = l; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(29/*import_as_names*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // import_as_name ::= TYPE_NAME AS TYPE_NAME 
            {
              Pair RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		org.tyco.common.symbol.Symbol n = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		org.tyco.common.symbol.Symbol m = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Pair(n, m); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(30/*import_as_name*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // import_as_name ::= TYPE_NAME 
            {
              Pair RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		org.tyco.common.symbol.Symbol n = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Pair(n, n); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(30/*import_as_name*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dots ::= DOT 
            {
              String RESULT = null;
		 RESULT = "."; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(26/*dots*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dots ::= dots DOT 
            {
              String RESULT = null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		String ds = (String)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = ds + "."; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(26/*dots*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dot_dotted_name ::= dotted_name 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = n; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(27/*dot_dotted_name*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dot_dotted_name ::= dots dotted_name 
            {
              String RESULT = null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		String ds = (String)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = ds + n; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(27/*dot_dotted_name*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dot_dotted_name ::= dots 
            {
              String RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = d; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(27/*dot_dotted_name*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // import_from ::= FROM dot_dotted_name IMPORT import_as_names 
            {
              Map RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		
        SourceLocation loc = parser.getLocation(xleft, xright);
        RESULT = parser.importTypes(loc, n, l);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(31/*import_from*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // import_from ::= FROM dot_dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Map RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		
        SourceLocation loc = parser.getLocation(xleft, xright);
        RESULT = parser.importTypes(loc, n, l);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(31/*import_from*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-5)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // import_from ::= FROM dot_dotted_name IMPORT LONG_MULTIPLICATION 
            {
              Map RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).value;
		
        SourceLocation loc = parser.getLocation(xleft, xright);
        RESULT = parser.importTypes(loc, n);
        
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(31/*import_from*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // typereg ::= typedef 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		RecursiveType t = (RecursiveType)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 parser.setType(t); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(19/*typereg*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // typereg ::= import_from NL 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		Map f = (Map)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 parser.updateImported(f); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(19/*typereg*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= type_name 
            {
              CallasType RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasType n = (CallasType)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = n; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= BOOL_TYPE 
            {
              CallasType RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new BBoolType(parser.getLocation(xleft, xright)); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= DOUBLE_TYPE 
            {
              CallasType RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new BDoubleType(parser.getLocation(xleft, xright)); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= LONG_TYPE 
            {
              CallasType RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new BLongType(parser.getLocation(xleft, xright)); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= STRING_TYPE 
            {
              CallasType RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new BStringType(parser.getLocation(xleft, xright)); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_name ::= TYPE_NAME 
            {
              CallasType RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		org.tyco.common.symbol.Symbol n = (org.tyco.common.symbol.Symbol)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = parser.getType(parser.getLocation(nleft, nright), n); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(6/*type_name*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // typeregs ::= typereg 
            {
              Object RESULT = null;

              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(20/*typeregs*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // typeregs ::= typereg typeregs 
            {
              Object RESULT = null;

              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(20/*typeregs*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= 
            {
              CallasProcess RESULT = null;
		 RESULT = new Code(parser.getLocation(0, 0)); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(21/*program*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= typeregs 
            {
              CallasProcess RESULT = null;
		 RESULT = new Code(parser.getLocation(0, 0)); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(21/*program*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= typeregs moduledef 
            {
              CallasProcess RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess m = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 
        LinkedList ll = new LinkedList();
        ll.add(m);
        RESULT = parser.composeBody(ll); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(21/*program*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_level ::= error 
            {
              CallasProcess RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = new Code(parser.getLocation(xleft, xright)); 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(3/*top_level*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_level ::= program 
            {
              CallasProcess RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right;
		CallasProcess p = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).value;
		 RESULT = p; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(3/*top_level*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // top_level ::= INDENT program DEDENT 
            {
              CallasProcess RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		CallasProcess p = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		 RESULT = p; 
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(3/*top_level*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          return CUP$ProcessGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= top_level EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).right;
		CallasProcess start_val = (CallasProcess)((java_cup.runtime.Symbol) CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).value;
		RESULT = start_val;
              CUP$ProcessGrm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcessGrm$stack.elementAt(CUP$ProcessGrm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ProcessGrm$parser.done_parsing();
          return CUP$ProcessGrm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

