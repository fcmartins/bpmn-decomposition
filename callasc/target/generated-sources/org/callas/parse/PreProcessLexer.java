/* The following code was generated by JFlex 1.3.5 on 4/20/16 1:01 AM */

package org.callas.parse;

import java.io.IOException;

import java.util.List;
import java.util.Stack;

import java_cup.runtime.Symbol;

import org.tyco.common.errorMsg.SourceLocation;
import org.tyco.common.errorMsg.ErrorMessage;
import org.callas.absyn.processes.BinaryOperator;
import org.callas.absyn.processes.UnaryOperator;

import org.tyco.common.errorMsg.msgs.SyntacticError;

/**
 * The lexicon of Callas.
 *
 * @author Tiago Cogumbreiro
 * @author Rui Mendes (rui.mendes@dcc.fc.up.pt)
 * @version $Id: callas-proc.lex,v 1.11 2012/04/17 16:37:33 ruimendes Exp $
 */
@SuppressWarnings("all") // Uncomment to disable warnings on generated files!

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 4/20/16 1:01 AM from the specification file
 * <tt>file:/home/fferreira/Bolsas/FCT.1/svn/trunk/software/fabio/callas/callasc/src/main/jflex/callas-proc.lex</tt>
 */
class PreProcessLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STATE_STRING = 1;
  final public static int YYINITIAL = 0;
  final public static int STATE_MSTRING = 2;
  final public static int STATE_DEDENT = 4;
  final public static int STATE_NORMAL = 3;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\2\0\1\1\22\0\1\15\1\36\1\66\1\4"+
    "\1\0\1\35\1\32\1\0\1\17\1\20\1\25\1\11\1\21\1\26"+
    "\1\7\1\27\12\6\1\23\1\24\1\31\1\22\1\30\2\0\4\5"+
    "\1\10\1\61\15\5\1\60\6\5\1\0\1\16\1\0\1\34\1\12"+
    "\1\0\1\37\1\54\1\56\1\41\1\14\1\51\1\53\1\13\1\50"+
    "\1\13\1\65\1\52\1\63\1\40\1\42\1\64\1\13\1\43\1\47"+
    "\1\46\1\55\1\57\1\13\1\44\1\62\1\13\1\0\1\33\1\0"+
    "\1\45\uff81\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    55,   110,   165,   220,   275,   330,   275,   385,   440, 
      275,   495,   275,   550,   275,   605,   660,   275,   715,   770, 
      825,   880,   935,   990,  1045,  1100,  1155,  1210,   275,   275, 
      275,  1265,   275,   275,  1320,  1375,  1430,  1485,  1540,   275, 
     1595,   275,   275,  1650,  1705,  1760,  1815,  1870,  1925,  1980, 
      275,  2035,  2090,  2145,  2200,  2255,  2310,  2365,  2420,  2475, 
     2530,  2585,  2640,   385,   275,   275,   275,   275,  2695,   770, 
     2750,  2805,   275,  1045,  2860,  2915,  2970,  3025,   275,   275, 
      275,   275,   275,   275,   275,   275,   275,   275,   275,  3080, 
      275,  3135,  1100,  3190,  3245,  3300,  1100,  1100,  3355,  3410, 
     3465,  3520,  3575,  3630,  1100,  3685,  3740,  3795,  3850,  3905, 
     3960,  4015,  4070,  4125,  4180,  4235,   275,  4290,  4290,  4345, 
     4400,  4455,  4510,   275,  1100,  1100,  4565,  4620,  4675,  4730, 
     1100,  4785,  4840,  4895,  4950,  5005,  5060,  5115,  5170,  5225, 
     5280,  5335,  5390,  5445,  5500,  5555,  5610,   275,  5665,  1100, 
     1100,  5720,  5775,  5830,  1100,  5885,  1100,  5940,  5995,  6050, 
     6105,  6160,  1100,  1100,  1100,  1100,  6215,   825,  6270,  6325, 
     1100,  1100,  6380,  1100,  6435,  6490,  6545,  6600,  1100,  6655, 
     6710,  6765,  1100,   825,  6820,  1100,  6875,  1100,  6930,  1100, 
     1100,  6985,  1100,  1100,  7040,  1100,  1100,  7095,  1100
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\6\1\7\1\10\1\6\1\11\10\6\1\12\51\6"+
    "\1\13\1\14\1\15\13\13\1\16\47\13\1\17\66\13"+
    "\1\20\1\15\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\25\1\30\1\31\1\32\1\33\1\23\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\32"+
    "\1\64\1\65\1\66\1\67\1\32\1\70\1\32\1\71"+
    "\1\32\1\72\1\73\1\32\1\74\1\75\1\76\1\77"+
    "\2\6\1\0\64\6\71\0\1\10\64\0\2\100\1\10"+
    "\64\100\15\0\1\12\53\0\1\15\102\0\1\101\21\0"+
    "\1\102\5\0\1\103\17\0\1\104\66\13\1\105\2\0"+
    "\1\22\67\0\1\23\11\0\1\23\51\0\2\106\1\22"+
    "\64\106\5\0\2\25\1\0\1\25\1\0\3\25\22\0"+
    "\6\25\1\0\20\25\7\0\1\26\1\107\1\110\3\0"+
    "\1\110\60\0\1\107\67\0\1\111\64\0\1\25\2\0"+
    "\1\25\1\0\1\112\2\32\22\0\6\32\1\0\12\32"+
    "\2\25\4\32\6\0\2\32\1\0\1\32\1\0\3\32"+
    "\22\0\6\32\1\0\20\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\5\32\1\113\1\0\4\32\1\114"+
    "\4\32\1\115\6\32\2\0\1\116\1\117\106\0\1\120"+
    "\53\0\1\121\66\0\1\122\106\0\1\123\46\0\1\124"+
    "\12\0\1\125\5\0\1\126\45\0\1\127\12\0\1\130"+
    "\6\0\1\131\70\0\1\132\55\0\1\133\51\0\2\32"+
    "\1\0\1\32\1\0\3\32\22\0\1\32\1\134\4\32"+
    "\1\0\1\32\1\135\16\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\3\32\1\136\2\32\1\0\20\32"+
    "\6\0\2\32\1\0\1\32\1\0\2\32\1\137\22\0"+
    "\3\32\1\140\2\32\1\0\20\32\6\0\2\32\1\0"+
    "\1\32\1\0\3\32\22\0\4\32\1\141\1\32\1\0"+
    "\3\32\1\142\12\32\1\143\1\32\6\0\2\32\1\0"+
    "\1\32\1\0\2\32\1\144\22\0\6\32\1\0\20\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\3\32"+
    "\1\145\2\32\1\0\20\32\6\0\2\32\1\0\1\32"+
    "\1\0\2\32\1\146\22\0\6\32\1\0\1\147\17\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\1\32"+
    "\1\150\4\32\1\0\3\32\1\151\11\32\1\152\2\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\4\32"+
    "\1\153\1\32\1\0\20\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\3\32\1\154\2\32\1\0\20\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\3\32"+
    "\1\155\2\32\1\0\20\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\6\32\1\0\4\32\1\156\13\32"+
    "\6\0\2\25\1\0\1\25\1\0\3\25\22\0\4\25"+
    "\1\157\1\25\1\0\20\25\6\0\2\25\1\0\1\25"+
    "\1\0\3\25\22\0\1\160\5\25\1\0\20\25\6\0"+
    "\2\32\1\0\1\32\1\0\3\32\22\0\3\32\1\161"+
    "\2\32\1\0\20\32\6\0\2\32\1\0\1\32\1\0"+
    "\3\32\22\0\1\162\5\32\1\0\20\32\6\0\2\32"+
    "\1\0\1\32\1\0\3\32\22\0\6\32\1\0\2\32"+
    "\1\163\15\32\67\0\1\164\66\13\1\165\6\0\1\107"+
    "\1\0\1\110\3\0\1\110\60\0\1\166\2\0\1\167"+
    "\14\0\1\167\45\0\2\32\1\0\1\32\1\0\3\32"+
    "\22\0\6\32\1\0\1\170\17\32\6\0\2\32\1\0"+
    "\1\32\1\0\3\32\22\0\6\32\1\0\1\32\1\171"+
    "\1\172\15\32\6\0\2\32\1\0\1\32\1\0\2\32"+
    "\1\173\22\0\6\32\1\0\20\32\3\0\1\117\106\0"+
    "\1\174\51\0\2\32\1\0\1\32\1\0\3\32\22\0"+
    "\2\32\1\175\3\32\1\0\20\32\6\0\2\32\1\0"+
    "\1\32\1\0\3\32\22\0\6\32\1\0\1\176\17\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\6\32"+
    "\1\0\3\32\1\177\14\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\6\32\1\0\7\32\1\200\10\32"+
    "\6\0\2\32\1\0\1\32\1\0\2\32\1\201\22\0"+
    "\6\32\1\0\20\32\6\0\2\32\1\0\1\32\1\0"+
    "\3\32\22\0\6\32\1\0\10\32\1\202\7\32\6\0"+
    "\2\32\1\0\1\32\1\0\3\32\22\0\4\32\1\203"+
    "\1\32\1\0\20\32\6\0\2\32\1\0\1\32\1\0"+
    "\3\32\22\0\1\32\1\204\4\32\1\0\4\32\1\205"+
    "\13\32\6\0\2\32\1\0\1\32\1\0\3\32\22\0"+
    "\3\32\1\206\1\207\1\32\1\0\20\32\6\0\2\32"+
    "\1\0\1\32\1\0\3\32\22\0\6\32\1\0\1\32"+
    "\1\210\16\32\6\0\2\32\1\0\1\32\1\0\3\32"+
    "\22\0\6\32\1\0\16\32\1\211\1\32\6\0\2\32"+
    "\1\0\1\32\1\0\3\32\22\0\3\32\1\212\2\32"+
    "\1\0\20\32\6\0\2\32\1\0\1\32\1\0\3\32"+
    "\22\0\1\213\1\214\4\32\1\0\20\32\6\0\2\32"+
    "\1\0\1\32\1\0\3\32\22\0\3\32\1\215\2\32"+
    "\1\0\20\32\6\0\2\32\1\0\1\32\1\0\3\32"+
    "\22\0\3\32\1\216\2\32\1\0\20\32\6\0\2\25"+
    "\1\0\1\25\1\0\3\25\22\0\6\25\1\0\7\25"+
    "\1\217\10\25\6\0\2\25\1\0\1\25\1\0\3\25"+
    "\22\0\6\25\1\0\4\25\1\220\13\25\6\0\2\32"+
    "\1\0\1\32\1\0\3\32\22\0\2\32\1\221\3\32"+
    "\1\0\20\32\6\0\2\32\1\0\1\32\1\0\3\32"+
    "\22\0\6\32\1\0\1\32\1\222\16\32\6\0\2\32"+
    "\1\0\1\32\1\0\3\32\22\0\6\32\1\0\4\32"+
    "\1\223\13\32\67\0\1\224\6\0\1\166\65\0\2\32"+
    "\1\0\1\32\1\0\2\32\1\225\22\0\6\32\1\0"+
    "\20\32\6\0\2\32\1\0\1\32\1\0\2\32\1\226"+
    "\22\0\6\32\1\0\20\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\6\32\1\0\3\32\1\227\14\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\4\32"+
    "\1\230\1\32\1\0\20\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\6\32\1\0\15\32\1\231\2\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\6\32"+
    "\1\0\6\32\1\232\11\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\1\32\1\233\4\32\1\0\20\32"+
    "\6\0\2\32\1\0\1\32\1\0\2\32\1\234\22\0"+
    "\6\32\1\0\20\32\6\0\2\32\1\0\1\32\1\0"+
    "\3\32\22\0\2\32\1\235\3\32\1\0\20\32\6\0"+
    "\2\32\1\0\1\32\1\0\2\32\1\236\22\0\6\32"+
    "\1\0\20\32\6\0\2\32\1\0\1\32\1\0\3\32"+
    "\22\0\4\32\1\237\1\32\1\0\20\32\6\0\2\32"+
    "\1\0\1\32\1\0\3\32\22\0\6\32\1\0\2\32"+
    "\1\240\15\32\6\0\2\32\1\0\1\32\1\0\3\32"+
    "\22\0\6\32\1\0\1\241\17\32\6\0\2\32\1\0"+
    "\1\32\1\0\3\32\22\0\3\32\1\242\2\32\1\0"+
    "\20\32\6\0\2\32\1\0\1\32\1\0\3\32\22\0"+
    "\6\32\1\0\15\32\1\243\2\32\6\0\2\32\1\0"+
    "\1\32\1\0\3\32\22\0\2\32\1\244\3\32\1\0"+
    "\20\32\6\0\2\32\1\0\1\32\1\0\3\32\22\0"+
    "\6\32\1\0\5\32\1\245\12\32\6\0\2\32\1\0"+
    "\1\32\1\0\3\32\22\0\6\32\1\0\4\32\1\246"+
    "\13\32\6\0\2\32\1\0\1\32\1\0\3\32\22\0"+
    "\6\32\1\0\1\32\1\247\16\32\6\0\2\25\1\0"+
    "\1\25\1\0\2\25\1\250\22\0\6\25\1\0\20\25"+
    "\6\0\2\25\1\0\1\25\1\0\3\25\22\0\6\25"+
    "\1\0\1\25\1\251\16\25\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\6\32\1\0\7\32\1\252\10\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\6\32"+
    "\1\0\1\32\1\253\16\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\6\32\1\0\4\32\1\254\13\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\4\32"+
    "\1\255\1\32\1\0\20\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\6\32\1\0\14\32\1\256\3\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\3\32"+
    "\1\257\2\32\1\0\20\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\6\32\1\0\4\32\1\260\13\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\6\32"+
    "\1\0\2\32\1\261\15\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\6\32\1\0\10\32\1\262\7\32"+
    "\6\0\2\32\1\0\1\32\1\0\2\32\1\263\22\0"+
    "\6\32\1\0\20\32\6\0\2\32\1\0\1\32\1\0"+
    "\3\32\22\0\1\32\1\264\4\32\1\0\20\32\6\0"+
    "\2\32\1\0\1\32\1\0\3\32\22\0\1\265\5\32"+
    "\1\0\20\32\6\0\2\32\1\0\1\32\1\0\3\32"+
    "\22\0\4\32\1\266\1\32\1\0\20\32\6\0\2\32"+
    "\1\0\1\32\1\0\2\32\1\267\22\0\6\32\1\0"+
    "\20\32\6\0\2\25\1\0\1\25\1\0\2\25\1\270"+
    "\22\0\6\25\1\0\20\25\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\6\32\1\0\4\32\1\271\13\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\1\32"+
    "\1\272\4\32\1\0\20\32\6\0\2\32\1\0\1\32"+
    "\1\0\3\32\22\0\2\32\1\273\3\32\1\0\20\32"+
    "\6\0\2\32\1\0\1\32\1\0\2\32\1\274\22\0"+
    "\6\32\1\0\20\32\6\0\2\32\1\0\1\32\1\0"+
    "\3\32\22\0\6\32\1\0\11\32\1\275\6\32\6\0"+
    "\2\32\1\0\1\32\1\0\3\32\22\0\6\32\1\0"+
    "\1\276\17\32\6\0\2\32\1\0\1\32\1\0\3\32"+
    "\22\0\6\32\1\0\5\32\1\277\12\32\6\0\2\32"+
    "\1\0\1\32\1\0\3\32\22\0\6\32\1\0\4\32"+
    "\1\300\13\32\6\0\2\32\1\0\1\32\1\0\3\32"+
    "\22\0\6\32\1\0\1\301\17\32\6\0\2\32\1\0"+
    "\1\32\1\0\2\32\1\302\22\0\6\32\1\0\20\32"+
    "\6\0\2\32\1\0\1\32\1\0\3\32\22\0\6\32"+
    "\1\0\7\32\1\303\10\32\6\0\2\32\1\0\1\32"+
    "\1\0\2\32\1\304\22\0\6\32\1\0\20\32\6\0"+
    "\2\32\1\0\1\32\1\0\3\32\22\0\6\32\1\0"+
    "\4\32\1\305\13\32\6\0\2\32\1\0\1\32\1\0"+
    "\3\32\22\0\6\32\1\0\4\32\1\306\13\32\6\0"+
    "\2\32\1\0\1\32\1\0\2\32\1\307\22\0\6\32"+
    "\1\0\20\32\1\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  1,  0,  9,  1,  9,  1,  1,  9,  1,  9,  1,  9,  0, 
     1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  1, 
     9,  9,  1,  1,  1,  1,  1,  9,  1,  9,  9,  1,  1,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     9,  9,  9,  9,  0,  0,  1,  0,  9,  0,  1,  1,  1,  0,  9,  9, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  9,  1,  0,  1,  1,  1,  1,  9,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    private int indentLen = 0;
    private int returnTo = YYINITIAL;
    Stack<Integer> levels = new Stack<Integer>();
    List<ErrorMessage> errors = null;
    StringBuffer buffer = null;
    
    {
        levels.push(new Integer(0));
    }
    
    public void setErrors(List<ErrorMessage> errors) {
        this.errors = errors;
    }
    
    private int pos(){
        return yychar;
    }

    protected java_cup.runtime.Symbol token (int kind, Object value) {
        return new java_cup.runtime.Symbol (kind, yyline, yycolumn, value);
    }

    protected java_cup.runtime.Symbol token (int kind) {
        return token (kind, yytext ());
    }

    private int getIndentLen() {
        return levels.peek().intValue();
    }
    
    private Symbol indentDedent() {
        yypushback(yytext().length());
        final int newState;
        final Symbol result;
        if (getIndentLen() < indentLen) {
            levels.push(indentLen);
            newState = STATE_NORMAL;
            result = token(ProcessSym.INDENT);
        } else if (getIndentLen() > indentLen) {
            levels.pop();
            newState = STATE_DEDENT;
            result = token(ProcessSym.DEDENT);
        } else {
            newState = STATE_NORMAL;
            result = null;
        }
        yybegin(newState);
        return result;
    }
            


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PreProcessLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PreProcessLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[7150];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 9: 
          {  indentLen += yytext().length();  }
        case 200: break;
        case 190: 
          {  return token(ProcessSym.STRING_TYPE);  }
        case 201: break;
        case 187: 
          {  return token(ProcessSym.DOUBLE_TYPE);  }
        case 202: break;
        case 123: 
          {  return token(ProcessSym.MERGE_ASSIGN);  }
        case 203: break;
        case 22: 
          {  return token(ProcessSym.DOT);  }
        case 204: break;
        case 92: 
          {  return token(ProcessSym.AS);  }
        case 205: break;
        case 97: 
          {  return token(ProcessSym.OF);  }
        case 206: break;
        case 104: 
          {  return token(ProcessSym.IF);  }
        case 207: break;
        case 126: 
          {  return token(ProcessSym.DEF);  }
        case 208: break;
        case 183: 
          {  return token(ProcessSym.FALSE);  }
        case 209: break;
        case 182: 
          {  return token(ProcessSym.CLOSE);  }
        case 210: break;
        case 178: 
          {  return token(ProcessSym.STORE);  }
        case 211: break;
        case 173: 
          {  return token(ProcessSym.EVERY);  }
        case 212: break;
        case 171: 
          {  return token(ProcessSym.KILL);  }
        case 213: break;
        case 32: 
          {  return token(ProcessSym.COLON);  }
        case 214: break;
        case 31: 
          {  return token(ProcessSym.EQUAL);  }
        case 215: break;
        case 14: 
          {  yybegin(YYINITIAL); return token(ProcessSym.STRING, buffer.toString()); }
        case 216: break;
        case 25: 
        case 26: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 59: 
        case 60: 
        case 61: 
        case 74: 
        case 75: 
        case 76: 
        case 91: 
        case 93: 
        case 94: 
        case 95: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 112: 
        case 113: 
        case 114: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 127: 
        case 128: 
        case 129: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 144: 
        case 145: 
        case 146: 
        case 148: 
        case 151: 
        case 152: 
        case 153: 
        case 155: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 166: 
        case 169: 
        case 172: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 179: 
        case 180: 
        case 181: 
        case 184: 
        case 186: 
        case 188: 
        case 191: 
        case 194: 
        case 197: 
          {  return token(ProcessSym.ID, org.tyco.common.symbol.Symbol.symbol(yytext()));  }
        case 217: break;
        case 30: 
          {  return token(ProcessSym.COMMA);  }
        case 218: break;
        case 89: 
          {  return token(ProcessSym.MERGE);  }
        case 219: break;
        case 149: 
          {  return token(ProcessSym.ELSE);  }
        case 220: break;
        case 150: 
          {  return token(ProcessSym.ELIF);  }
        case 221: break;
        case 154: 
          {  return token(ProcessSym.OPEN);  }
        case 222: break;
        case 156: 
          {  return token(ProcessSym.SEND);  }
        case 223: break;
        case 162: 
          {  return token(ProcessSym.FROM);  }
        case 224: break;
        case 163: 
          {  return token(ProcessSym.LOAD);  }
        case 225: break;
        case 167: 
          {  return token(ProcessSym.TRUE);  }
        case 226: break;
        case 67: 
          {  buffer.append("\"");  }
        case 227: break;
        case 66: 
          {  buffer.append("\t");  }
        case 228: break;
        case 65: 
          {  buffer.append("\n");  }
        case 229: break;
        case 64: 
          {  buffer.append("\\");  }
        case 230: break;
        case 33: 
          {  return token(ProcessSym.SEMICOLON);  }
        case 231: break;
        case 164: 
          {  return token(ProcessSym.LONG_TYPE);  }
        case 232: break;
        case 165: 
          {  return token(ProcessSym.BOOL_TYPE);  }
        case 233: break;
        case 10: 
        case 11: 
        case 13: 
          {  buffer.append(yytext());  }
        case 234: break;
        case 198: 
          {  return token(ProcessSym.DEFMOD);  }
        case 235: break;
        case 196: 
          {  return token(ProcessSym.INSTALL);  }
        case 236: break;
        case 195: 
          {  return token(ProcessSym.RECEIVE);  }
        case 237: break;
        case 193: 
          {  return token(ProcessSym.MODULE);  }
        case 238: break;
        case 192: 
          {  return token(ProcessSym.IMPORT);  }
        case 239: break;
        case 189: 
          {  return token(ProcessSym.SELECT);  }
        case 240: break;
        case 185: 
          {  return token(ProcessSym.EXTERN);  }
        case 241: break;
        case 20: 
        case 57: 
        case 58: 
        case 110: 
        case 111: 
        case 142: 
        case 143: 
        case 168: 
          {  return token(ProcessSym.TYPE_NAME, org.tyco.common.symbol.Symbol.symbol(yytext()));  }
        case 242: break;
        case 28: 
          {  return token(ProcessSym.LPAREN);  }
        case 243: break;
        case 29: 
          {  return token(ProcessSym.RPAREN);  }
        case 244: break;
        case 170: 
          {  return token(ProcessSym.PASSKW);  }
        case 245: break;
        case 41: 
          {  return token(ProcessSym.LONG_EXCLUSIVE_OR, BinaryOperator.LONG_EXCLUSIVE_OR);  }
        case 246: break;
        case 40: 
          {  return token(ProcessSym.LONG_OR, BinaryOperator.LONG_OR);  }
        case 247: break;
        case 96: 
          {  return token(ProcessSym.BOOL_OR, BinaryOperator.BOOL_OR);  }
        case 248: break;
        case 130: 
          {  return token(ProcessSym.BOOL_EXCLUSIVE_OR, BinaryOperator.BOOL_EXCLUSIVE_OR);  }
        case 249: break;
        case 16: 
        case 19: 
        case 24: 
        case 27: 
        case 43: 
          {  return token(ProcessSym.error, yytext());  }
        case 250: break;
        case 12: 
          {  return token(ProcessSym.error, yytext());  }
        case 251: break;
        case 21: 
          {  return token(ProcessSym.LONG, new Long(yytext ()));  }
        case 252: break;
        case 50: 
          {  return token(ProcessSym.LONG_NOT, UnaryOperator.LONG_NOT);  }
        case 253: break;
        case 125: 
          {  return token(ProcessSym.BOOL_NOT, UnaryOperator.BOOL_NOT);  }
        case 254: break;
        case 42: 
          {  return token(ProcessSym.LONG_MODULUS, BinaryOperator.LONG_MODULUS);  }
        case 255: break;
        case 7: 
          {  indentLen = 0; }
        case 256: break;
        case 17: 
          {  indentLen = 0; yybegin(YYINITIAL); return token(ProcessSym.NL); }
        case 257: break;
        case 36: 
          {  return token(ProcessSym.DOUBLE_DIVISION, BinaryOperator.DOUBLE_DIVISION);  }
        case 258: break;
        case 35: 
          {  return token(ProcessSym.LONG_SUBTRACTION, BinaryOperator.LONG_SUBTRACTION);  }
        case 259: break;
        case 34: 
          {  return token(ProcessSym.LONG_MULTIPLICATION, BinaryOperator.LONG_MULTIPLICATION);  }
        case 260: break;
        case 23: 
          {  return token(ProcessSym.LONG_ADDITION, BinaryOperator.LONG_ADDITION);  }
        case 261: break;
        case 72: 
          {  return token(ProcessSym.DOUBLE_ADDITION, BinaryOperator.DOUBLE_ADDITION);  }
        case 262: break;
        case 80: 
          {  return token(ProcessSym.DOUBLE_MULTIPLICATION, BinaryOperator.DOUBLE_MULTIPLICATION);  }
        case 263: break;
        case 81: 
          {  return token(ProcessSym.DOUBLE_SUBTRACTION, BinaryOperator.DOUBLE_SUBTRACTION);  }
        case 264: break;
        case 82: 
          {  return token(ProcessSym.LONG_DIVISION, BinaryOperator.LONG_DIVISION);  }
        case 265: break;
        case 38: 
          {  return token(ProcessSym.LONG_LESS_THAN, BinaryOperator.LONG_LESS_THAN);  }
        case 266: break;
        case 37: 
          {  return token(ProcessSym.LONG_GREATER_THAN, BinaryOperator.LONG_GREATER_THAN);  }
        case 267: break;
        case 83: 
          {  return token(ProcessSym.DOUBLE_GREATER_THAN, BinaryOperator.DOUBLE_GREATER_THAN);  }
        case 268: break;
        case 86: 
          {  return token(ProcessSym.DOUBLE_LESS_THAN, BinaryOperator.DOUBLE_LESS_THAN);  }
        case 269: break;
        case 85: 
          {  return token(ProcessSym.LONG_SHIFT_RIGHT, BinaryOperator.LONG_SHIFT_RIGHT);  }
        case 270: break;
        case 88: 
          {  return token(ProcessSym.LONG_SHIFT_LEFT, BinaryOperator.LONG_SHIFT_LEFT);  }
        case 271: break;
        case 90: 
          {  return token(ProcessSym.LONG_DIFFERENT, BinaryOperator.LONG_DIFFERENT);  }
        case 272: break;
        case 70: 
        case 117: 
          {  return token(ProcessSym.DOUBLE, new Double(yytext ()));  }
        case 273: break;
        case 39: 
          {  return token(ProcessSym.LONG_AND, BinaryOperator.LONG_AND);  }
        case 274: break;
        case 79: 
          {  return token(ProcessSym.LONG_EQUALS, BinaryOperator.LONG_EQUALS);  }
        case 275: break;
        case 84: 
          {  return token(ProcessSym.LONG_GREATER_THAN_EQUALS, BinaryOperator.LONG_GREATER_THAN_EQUALS);  }
        case 276: break;
        case 87: 
          {  return token(ProcessSym.LONG_LESS_THAN_EQUALS, BinaryOperator.LONG_LESS_THAN_EQUALS);  }
        case 277: break;
        case 124: 
          {  return token(ProcessSym.BOOL_AND, BinaryOperator.BOOL_AND);  }
        case 278: break;
        case 5: 
        case 6: 
        case 8: 
          {  Symbol t = indentDedent(); if (t != null) return t;  }
        case 279: break;
        case 62: 
          {  buffer = new StringBuffer(); yybegin (STATE_STRING);  }
        case 280: break;
        case 147: 
          {  buffer = new StringBuffer(); yybegin (STATE_MSTRING);  }
        case 281: break;
        case 116: 
          {  yybegin(STATE_NORMAL); return token (ProcessSym.STRING,buffer.toString()); }
        case 282: break;
        case 3: 
        case 18: 
          {   }
        case 283: break;
        case 78: 
          {   }
        case 284: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(ProcessSym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
