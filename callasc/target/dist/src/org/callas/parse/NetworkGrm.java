
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Apr 20 01:01:40 WEST 2016
//----------------------------------------------------

package org.callas.parse;

import java.util.HashMap;
import java.util.List;
import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.util.List;
import java_cup.runtime.Symbol;
import org.callas.absyn.FileSection;
import org.callas.absyn.NetworkFile;
import org.callas.absyn.SourceValue;
import org.callas.core.IFileLoader;
import org.tyco.common.errorMsg.ErrorMessage;
import org.tyco.common.errorMsg.SourceLocation;
import org.tyco.common.errorMsg.msgs.SyntacticError;

/** CUP v0.10k generated parser.
  * @version Wed Apr 20 01:01:40 WEST 2016
  */
public class NetworkGrm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public NetworkGrm() {super();}

  /** Constructor which sets the default scanner. */
  public NetworkGrm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\004\005\000\002\004" +
    "\003\000\002\004\002\000\002\004\003\000\002\003\004" +
    "\000\002\003\007\000\002\003\003\000\002\003\006\000" +
    "\002\005\010\000\002\005\006\000\002\005\010\000\002" +
    "\006\006\000\002\006\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\014\002\ufffe\003\007\004\010\006\012\013" +
    "\005\001\002\000\010\002\uffff\004\010\013\014\001\002" +
    "\000\004\005\044\001\002\000\004\002\043\001\002\000" +
    "\004\002\ufffd\001\002\000\004\011\022\001\002\000\012" +
    "\002\ufffa\004\ufffa\007\ufffa\013\ufffa\001\002\000\006\004" +
    "\010\013\005\001\002\000\010\004\010\007\015\013\014" +
    "\001\002\000\004\005\017\001\002\000\004\002\000\001" +
    "\002\000\012\002\ufffc\004\ufffc\007\ufffc\013\ufffc\001\002" +
    "\000\004\014\020\001\002\000\004\010\021\001\002\000" +
    "\012\002\ufffb\004\ufffb\007\ufffb\013\ufffb\001\002\000\006" +
    "\010\023\012\024\001\002\000\004\006\026\001\002\000" +
    "\004\010\025\001\002\000\012\002\ufff7\004\ufff7\007\ufff7" +
    "\013\ufff7\001\002\000\006\012\030\013\027\001\002\000" +
    "\004\005\040\001\002\000\004\007\037\001\002\000\006" +
    "\007\033\013\032\001\002\000\004\005\034\001\002\000" +
    "\012\002\ufff6\004\ufff6\007\ufff6\013\ufff6\001\002\000\004" +
    "\014\035\001\002\000\004\010\036\001\002\000\006\007" +
    "\ufff4\013\ufff4\001\002\000\012\002\ufff8\004\ufff8\007\ufff8" +
    "\013\ufff8\001\002\000\004\014\041\001\002\000\004\010" +
    "\042\001\002\000\006\007\ufff5\013\ufff5\001\002\000\004" +
    "\002\001\001\002\000\004\014\045\001\002\000\004\010" +
    "\046\001\002\000\012\002\ufff9\004\ufff9\007\ufff9\013\ufff9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\010\003\003\004\005\005\010\001\001\000" +
    "\004\005\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\012\005\010\001\001\000\004\005\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$NetworkGrm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$NetworkGrm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$NetworkGrm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 
	public List<ErrorMessage> errors;
	
	public String filename;
	
	IFileLoader loader;
	
	NetworkGrm(List<ErrorMessage> errors, String filename, java.io.InputStream in, IFileLoader loader){
		this(new NetworkLexer(in));
		this.errors = errors;
		((NetworkLexer)getScanner()).errors = errors;
        this.filename = filename;
        this.loader = loader;
	}
	
    SourceLocation getLocation(int line, int col) {
       return new SourceLocation(filename, line + 1, col + 1);
    }
		
    /**
     * Print the error message.
     * @param msg The message
     * @param current The token where the error was detected
     */
    public void report_error (String msg, java_cup.runtime.Symbol info) {
        SourceLocation loc = info.left != -1 ? getLocation(info.left, info.right) : null;
        errors.add(new SyntacticError(loc, msg));
    }
    
    public void syntax_error(Symbol cur_token) {
        SourceLocation loc = cur_token.left != -1 ? getLocation(cur_token.left, cur_token.right) : null;
        String result = cur_token.value == null ? "." : " at '" + cur_token.value + "'";
        errors.add(new SyntacticError(loc, "Syntax error" + result));
    }
    
    public void unrecovered_syntax_error(Symbol cur_token) {
      report_fatal_error("Couldn't repair and continue parse!", cur_token);
    }

    public void report_fatal_error(
    String   message, 
    Object   info)
    {
      /* stop parsing (not really necessary since we throw an exception, but) */
      done_parsing();

      /* use the normal error message reporting to put out the message */
      report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$NetworkGrm$actions {
  private final NetworkGrm parser;

  /** Constructor */
  CUP$NetworkGrm$actions(NetworkGrm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$NetworkGrm$do_action(
    int                        CUP$NetworkGrm$act_num,
    java_cup.runtime.lr_parser CUP$NetworkGrm$parser,
    java.util.Stack            CUP$NetworkGrm$stack,
    int                        CUP$NetworkGrm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$NetworkGrm$result;

      /* select the action based on the action number */
      switch (CUP$NetworkGrm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sensor_body ::= sensor_body KEY EQ VALUE NL 
            {
              SensorBody RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-4)).right;
		SensorBody s = (SensorBody)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).right;
		java.lang.String k = (java.lang.String)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).right;
		java.lang.String v = (java.lang.String)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).value;
		
        RESULT = s;
        RESULT.put(parser.getLocation(kleft, kright), k, v);
    
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(4/*sensor_body*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-4)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sensor_body ::= KEY EQ VALUE NL 
            {
              SensorBody RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).right;
		java.lang.String k = (java.lang.String)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).right;
		java.lang.String v = (java.lang.String)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).value;
		
        RESULT = new SensorBody(parser.loader);
        RESULT.put(parser.getLocation(kleft, kright), k, v);
    
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(4/*sensor_body*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sensor ::= SENSOR COLON NL INDENT sensor_body DEDENT 
            {
              FileSection RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).right;
		SensorBody b = (SensorBody)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).value;
		
        RESULT = b.create(parser.getLocation(sleft, sright));
    
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(3/*sensor*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-5)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sensor ::= SENSOR COLON PASSKW NL 
            {
              FileSection RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).value;
		
        SensorBody b = new SensorBody(parser.loader);
        RESULT = b.create(parser.getLocation(sleft, sright));
    
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(3/*sensor*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sensor ::= SENSOR COLON NL INDENT PASSKW DEDENT 
            {
              FileSection RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-5)).value;
		
        SensorBody b = new SensorBody(parser.loader);
        RESULT = b.create(parser.getLocation(sleft, sright));
    
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(3/*sensor*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-5)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // network_file ::= KEY EQ VALUE NL 
            {
              NetworkFile RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).right;
		java.lang.String k = (java.lang.String)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).right;
		java.lang.String v = (java.lang.String)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).value;
		
        RESULT = new NetworkFile(parser.loader, parser.filename);
		RESULT.put(parser.getLocation(kleft, kright), k, v);
	
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(1/*network_file*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // network_file ::= sensor 
            {
              NetworkFile RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right;
		FileSection s = (FileSection)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).value;
		
	   RESULT = new NetworkFile(parser.loader, parser.filename);
	   RESULT.add(s);
	
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(1/*network_file*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // network_file ::= network_file KEY EQ VALUE NL 
            {
              NetworkFile RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-4)).right;
		NetworkFile f = (NetworkFile)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).right;
		java.lang.String k = (java.lang.String)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).right;
		java.lang.String v = (java.lang.String)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).value;
		
        RESULT = f;
		RESULT.put(parser.getLocation(kleft, kright), k, v);
    
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(1/*network_file*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-4)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // network_file ::= network_file sensor 
            {
              NetworkFile RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).right;
		NetworkFile f = (NetworkFile)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right;
		FileSection s = (FileSection)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).value;
		
        RESULT = f;
        RESULT.add(s);
    
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(1/*network_file*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_level ::= error 
            {
              NetworkFile RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).value;
		 RESULT = new NetworkFile(parser.loader, parser.filename); 
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(2/*top_level*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_level ::= 
            {
              NetworkFile RESULT = null;
		 RESULT = new NetworkFile(parser.loader, parser.filename); 
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(2/*top_level*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_level ::= network_file 
            {
              NetworkFile RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right;
		NetworkFile f = (NetworkFile)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).value;
		 RESULT = f; 
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(2/*top_level*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // top_level ::= INDENT network_file DEDENT 
            {
              NetworkFile RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).right;
		NetworkFile f = (NetworkFile)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).value;
		 RESULT = f; 
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(2/*top_level*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-2)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          return CUP$NetworkGrm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= top_level EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).right;
		NetworkFile start_val = (NetworkFile)((java_cup.runtime.Symbol) CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).value;
		RESULT = start_val;
              CUP$NetworkGrm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-1)).left, ((java_cup.runtime.Symbol)CUP$NetworkGrm$stack.elementAt(CUP$NetworkGrm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$NetworkGrm$parser.done_parsing();
          return CUP$NetworkGrm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

