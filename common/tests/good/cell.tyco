{-
 - Computation in tyco proceeds by message exchanging.  There are times
 - however when one needs to store values for later retrieval.  An
 - imperative variable is exactly that: it allows reading and writing.  A
 - simple one variable cell can be written as follows.
 -
 - Vasco T. Vasconcelos
 - $Id: cell.tyco,v 1.1 2004/02/12 17:44:20 tyco Exp $
 -}

-- A one place buffer cell
def Cell (self, value) =
  self ? { 
    read (replyto) =
      replyto ! [value] |
      Cell [self, value]
    write (newValue) = 
      Cell [self, newValue]
  }
in

-- Creating a cell
new intCell
Cell [intCell, 9] |

-- Print the value of the cell: there's so many different ways...
-- Version a - core-calculus version
{ new r
  intCell ! read [r] |
  r ? { val (w) =
    io ! printi [w]
  }
} |

-- Version b - omit label val
{ new r
  intCell ! read [r] |
  r ? (w) =
    io ! printi [w]
} |

-- Version c - use case (weird?)
case intCell ! read [] of {
  val (w) = io ! printi [w]
} |

-- Version d - using a let
let
  w = intCell ! read []
in
  io ! printi [w] |

-- Version e - the concise version (preferred)
io ! printi [intCell ! read []]
