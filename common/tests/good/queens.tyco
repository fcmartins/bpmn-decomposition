{-
 - Queens
 -
 - The number of solutions to the "n queens" problem.
 - A functional solution transposed to TyCO.
 -
 - Luis Lopes
 - $Id: queens.tyco,v 1.1 2004/02/12 17:44:20 tyco Exp $
 -}

def

{-
 - List constructors
 -}
Nil(self) = self ? (r) = r!nil[] | Nil[self]
Cons(self, h, t) = self ? (r) = r!cons[h,t] | Cons[self,h,t]

{- 
 -List lenght
 -}
Length(l,r) =
  case l![] of {
    nil()      =  r![0]
    cons(_, t) =  r![Length[t] + 1]
  }

in def

Safe(x, d, l, r) = 
  case l![] of {
    nil ()    =
      r![true]
    cons(h, t) =
      if x==h or x==h+d or x==h-d
      then r![false]
      else Safe[x, d+1, t, r]
  }

Gen(x, y, r) =
  if x==0 then 
    new r0 Nil[r0] | 
    new r1 Nil[r1] |
    new r2 Cons[r2, r0, r1] |
    r![r2] 
  else
    new r0 Nil[r0] | 
    Foldl[Gen[x-1, y], y, r0, r]

Foldl(l, y, v, r) =
  case l![] of {
    nil()     = r![v]
    cons(h,t) = Foldl[t, y, TryPos[y, h, v], r]
  }

TryPos(q, b, l, r) =
  if q == 0
  then r![l]
  else
    if Safe[q, 1, b]
    then
      new r0 Cons[r0, q, b] |
      new r1 Cons[r1, r0, l] |
      TryPos[q-1, b, r1, r]
    else
      TryPos[q-1, b, l, r]

Queens (size) = 
  io!puts ["#queens["];
  io!puti [size]; 
  io!puts ["]="];
  io!printi [Length [Gen [size, size]]]

in Queens[10]

| def X () = inaction in inaction
